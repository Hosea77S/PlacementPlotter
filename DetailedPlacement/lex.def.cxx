
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer def_create_buffer
#define yy_delete_buffer def_delete_buffer
#define yy_flex_debug def_flex_debug
#define yy_init_buffer def_init_buffer
#define yy_flush_buffer def_flush_buffer
#define yy_load_buffer_state def_load_buffer_state
#define yy_switch_to_buffer def_switch_to_buffer
#define yyin defin
#define yyleng defleng
#define yylex deflex
#define yylineno deflineno
#define yyout defout
#define yyrestart defrestart
#define yytext deftext

#define yyalloc defalloc
#define yyrealloc defrealloc
#define yyfree deffree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE defrestart(defin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int defleng;

extern FILE *defin, *defout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up deftext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up deftext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via defrestart()), so that the user can continue scanning by
	 * just pointing defin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when deftext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int defleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow defwrap()'s to do buffer switches
 * instead of setting up a fresh defin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void defrestart (FILE *input_file  );
void def_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE def_create_buffer (FILE *file,int size  );
void def_delete_buffer (YY_BUFFER_STATE b  );
void def_flush_buffer (YY_BUFFER_STATE b  );
void defpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void defpop_buffer_state (void );

static void defensure_buffer_stack (void );
static void def_load_buffer_state (void );
static void def_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER def_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE def_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE def_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE def_scan_bytes (yyconst char *bytes,int len  );

void *defalloc (yy_size_t  );
void *defrealloc (void *,yy_size_t  );
void deffree (void *  );

#define yy_new_buffer def_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        defensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            def_create_buffer(defin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        defensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            def_create_buffer(defin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *defin = (FILE *) 0, *defout = (FILE *) 0;

typedef int yy_state_type;

extern int deflineno;

int deflineno = 1;

extern char *deftext;
#define yytext_ptr deftext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up deftext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	defleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 157
#define YY_END_OF_BUFFER 158
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[674] =
    {   0,
        0,    0,    0,    0,  150,  150,  158,  156,    2,    3,
      155,  156,    1,  148,    6,    4,  143,    5,  146,  152,
      147,  144,    7,  155,  155,  155,  155,   99,  155,  155,
      155,  155,  155,  155,   97,  155,  155,  155,   98,  155,
      155,  155,  100,   74,   75,  157,    2,  155,  151,    6,
        4,  143,  155,  152,  144,  155,  155,  155,  155,  155,
      150,    2,  155,    0,  149,    1,  152,  145,  154,  155,
      155,  155,  155,  155,  155,   26,  155,  155,  155,  155,
      155,   25,  155,  155,  155,  155,  102,  155,  155,  101,
      155,  155,  103,  104,  155,  125,  155,  155,   87,  155,

      155,  124,  155,  155,  155,  155,  126,  155,   63,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,   87,  155,  155,  155,  150,  153,  155,
        0,  155,  153,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      127,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  112,   93,   64,  155,  155,   88,  155,  155,

      139,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,   53,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  121,  155,  155,  155,  155,
      155,  155,  155,  155,  155,   44,  155,  155,  155,  155,
      155,  155,  155,  155,  112,   88,  155,    0,  155,  154,
      153,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      133,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  108,  109,
      155,  155,  155,  155,   41,  155,  155,  155,  155,  113,

      155,  155,   18,  155,  155,  155,  155,   70,   16,  155,
       84,  132,  155,  155,  155,  155,   17,  155,  107,  155,
      155,  155,  155,   27,   50,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,   10,  155,  155,
      155,  155,  155,  154,  155,  155,   14,  155,  155,  155,
       57,  155,  155,  155,   35,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,   34,  155,  155,  155,  155,
      155,  155,  155,   67,  155,   76,   77,  155,  155,   28,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,   55,  155,   72,  155,  155,  155,  155,

      155,   82,  155,  155,  155,  155,  155,   49,  155,  155,
      155,   86,  155,  155,  137,  155,  155,   13,  155,  155,
      155,  155,  155,   94,  155,  155,   29,  155,   59,  155,
      155,  155,  155,  155,  155,  155,    9,  155,  155,  155,
      155,  155,   91,  155,  155,  155,  155,  155,  155,  155,
      155,  155,   56,  105,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,   78,  155,  155,  155,   36,
      155,   39,  155,  155,   92,  155,  155,   54,  155,   32,
      155,  155,  155,   71,  142,  155,  155,   58,   22,  155,
      155,  155,  155,  155,   33,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,   12,  155,  155,  155,  155,
      117,  116,  155,  155,  155,   38,  136,  155,  155,    8,
       69,  155,  119,  155,  123,   20,  155,  155,   45,  155,
      155,   89,  155,  155,   60,  115,  114,  155,   90,  155,
       96,   81,  155,  155,  155,  155,  155,  155,   51,   95,
       21,  155,   83,  155,  155,  155,  155,  155,  155,  155,
      155,  122,  155,  155,   85,   46,  155,  155,   31,  155,
      155,   42,  155,   43,  138,  155,  155,   61,  155,  131,
      155,  155,  155,  155,   79,   37,  130,  155,  155,  155,
      155,  155,   73,  155,  155,   80,  155,  135,   15,   23,

      140,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  120,  155,  155,  155,  155,   30,  155,   19,
      155,  155,  155,  155,  155,  155,   47,   66,  155,  155,
       11,  118,  128,  134,  155,  155,  111,  129,  155,  155,
       52,  155,  155,   40,  106,   24,  155,   68,  155,  155,
      155,  155,  155,  155,  155,  141,  155,   48,  155,  155,
      155,  155,  155,  155,  110,  155,  155,  155,  155,   62,
      155,   65,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    4,    1,    1,    1,    7,
        8,    9,   10,   11,   12,   13,    4,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   16,    4,
       17,    4,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
        4,   34,   35,   36,   37,   38,   39,   40,   41,   42,
        4,    4,    4,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,    4,   60,   61,   62,   63,   64,   65,   66,
       67,   68,    4,    4,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    1,    2,    3,    1,    3,    3,    3,    3,    1,
        1,    3,    3,    3,    3,    4,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[680] =
    {   0,
        0,    0,   68,  129,  268,  265,  278, 1384,  275, 1384,
        0,  263,    0,    0, 1384, 1384, 1384,  250,  247,   73,
        0, 1384,    0,   62,   48,  115,  120,   57,  173,  129,
       46,   59,  135,  130,  174,  192,  214,  235,  274,  264,
      163,  287,  187,   47,    0, 1384,  254,    0,    0, 1384,
     1384, 1384,  200,  197, 1384,   71,   88,   87,  140,  130,
        0,  204,    0,  198, 1384,    0,  237,    0,  222,   94,
      164,  198,  203,  212,  219,    0,  229,  233,  312,  269,
      318,    0,  245,  254,  240,  266,  301,  288,  302,    0,
      304,  312,    0,    0,  324,  316,  316,  316,  325,  319,

      318,    0,  322,  355,  328,  335,  354,  348,    0,  373,
      344,  362,  361,  377,  361,  370,  372,  387,  373,  376,
      391,  392,  408,  392,  415,  405,  425,  412,  414,  413,
      428,  428,  418,  436,  430,  433,  426,  427,  447,  437,
      441,  463,  457,    0,  443,  454,  458,    0,  481,  486,
      186,  171,  162,  463,  473,  486,  484,  488,  490,  489,
      481,  477,  491,  497,  491,  500,  497,  485,  496,  486,
        0,  506,  498,  510,  514,  524,  524,  519,  522,  532,
      518,  522,  522,  523,  539,  537,  542,  553,  531,  533,
      533,  548,  536,    0,    0,  551,  552,  546,  565,  576,

      573,  568,  576,  570,  583,  581,  575,  587,  591,  594,
      581,    0,  587,  588,  591,  601,  586,  590,  594,  610,
      611,  601,  607,  612,  620,    0,  614,  631,  630,  626,
      633,  640,  627,  627,  635,    0,  639,  632,  633,  633,
      646,  637,  652,  646,    0,    0,  652,  155,  152,  151,
       99,  648,  648,  641,  649,  661,  672,  669,  666,  670,
      669,  673,  673,  687,  678,  694,  697,  695,  695,  701,
      690,  685,  701,  689,  692,  701,  696,  701,  698,  726,
      702,  699,  703,  720,  719,  716,  728,  744,    0,    0,
      731,  738,  739,  732,    0,  734,  743,  734,  743,    0,

      751,  740,    0,  755,  744,  757,  759,    0,    0,  750,
        0,  754,  764,  786,  765,  773,    0,  762,    0,  781,
      776,  785,  778,    0,    0,  785,  790,  785,  789,  798,
      792,  796,  789,  791,  811,  812,  805,    0,  815,  809,
      811,  818,  815,   98,  826,  829,    0,  818,  822,  835,
        0,  832,  835,  833,    0,  839,  839,  849,  836,  842,
      853,  856,  844,  860,  856,    0,  856,  850,  861,  862,
      866,  873,  874,  865,  871,    0,    0,  884,  884,    0,
      878,  886,  887,  888,  888,  902,  901,  893,  889,  898,
      894,  897,  909,    0,  899,    0,  903,  917,  916,  913,

      914,    0,  913,  929,  930,  926,  940,   62,  938,  943,
      945,    0,  938,  948,    0,  937,  956,    0,  955,  957,
      945,  955,  944,    0,  963,  953,    0,  954,    0,  960,
      967,  953,  955,  970,  976,  959,    0,  981,  978,  989,
      976,  992,    0,  977,  988,  988,  992,  995,  995,  996,
      994,  993,    0,    0,  990,  998, 1002,  998, 1014, 1003,
     1004, 1015, 1024, 1023, 1028,    0, 1025, 1020, 1023,    0,
     1025, 1027, 1026, 1038,    0, 1053, 1034,    0, 1039,    0,
     1052, 1049, 1055,    0,    0, 1045, 1052,    0,    0, 1047,
     1062, 1056, 1055, 1067,    0, 1057, 1059, 1057, 1062, 1071,

     1080, 1079, 1072, 1082, 1093,    0, 1082, 1096, 1101, 1094,
        0,    0, 1089, 1103, 1110,    0,    0, 1104, 1109,    0,
        0, 1108,    0, 1100,    0,    0, 1104, 1101,    0, 1108,
     1109, 1110, 1120, 1102,    0,    0,    0, 1119,    0, 1124,
        0, 1117, 1116, 1125, 1123, 1138, 1144, 1144,    0,    0,
        0, 1146,    0, 1142, 1157, 1147, 1161, 1144, 1151, 1165,
     1153,    0, 1160, 1158,    0,    0, 1157, 1168,    0, 1155,
     1171,    0, 1172,    0,    0, 1177, 1163, 1177, 1169,    0,
     1180, 1171, 1165, 1188,    0,    0,    0, 1191, 1183, 1188,
     1205, 1196, 1197, 1195, 1201,    0, 1217,    0,    0,    0,

        0, 1202, 1202, 1209, 1204, 1219, 1207, 1209, 1209, 1225,
     1208, 1230,    0, 1217, 1232, 1222, 1233,    0, 1229,    0,
     1235, 1244, 1252, 1255, 1253, 1259,    0, 1248, 1251, 1265,
        0,    0,    0,    0, 1261, 1257,    0,    0, 1259, 1260,
        0, 1270, 1267,    0,    0,    0, 1263,    0, 1275, 1263,
     1264, 1270, 1267, 1268, 1280,    0, 1281,    0, 1289, 1280,
     1285, 1288, 1300, 1303,    0, 1293, 1302, 1313, 1305,    0,
     1303,    0, 1384, 1364, 1368,   72, 1372, 1376, 1380
    } ;

static yyconst flex_int16_t yy_def[680] =
    {   0,
      673,    1,  674,  674,  675,  675,  673,  673,  673,  673,
      676,  677,  678,  676,  673,  673,  673,  676,  676,  676,
      676,  673,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  673,  673,  676,  676,  673,
      673,  673,  676,  676,  673,  676,  676,  676,  676,  676,
      679,  673,  676,  677,  673,  678,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  679,  676,  676,
      673,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  673,  676,  676,
      673,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  673,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,    0,  673,  673,  673,  673,  673,  673
    } ;

static yyconst flex_int16_t yy_nxt[1453] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   11,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   11,   11,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   11,   11,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   11,   11,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   11,   46,   47,
       10,   98,   46,   46,   63,   49,   50,   51,   52,   53,
       71,   54,  143,   55,   75,   69,   67,   84,   76,   99,
      100,   85,   72,   56,   70,   73,   74,   98,   57,   58,

       59,  144,   60,  151,  483,  152,   71,  153,  143,  145,
       75,  344,  251,   84,   76,   99,  100,   85,   72,   56,
       70,   73,   74,  146,   57,   58,   59,  144,   60,   46,
       47,   10,   77,   46,   46,  145,   49,   50,   51,   52,
       53,   80,   54,   78,   55,   81,   79,  103,   95,  146,
       96,   82,  101,   83,   56,  104,  102,  147,   77,   57,
       58,   59,   97,   60,  250,  250,  105,   80,  344,   78,
      129,   81,   79,  103,   95,  153,   96,   82,  101,   83,
       56,  104,  102,  147,  153,   57,   58,   59,   97,   60,
       86,  106,  105,  135,   87,  107,  129,  136,   88,  251,

      154,   89,   65,   90,   91,   62,   92,   93,  141,   69,
       67,   94,  142,   67,  108,  155,   86,  106,   70,  135,
       87,  107,  109,  136,   88,  110,  154,   89,  111,   90,
       91,  112,   92,   93,  141,  149,  156,   94,  142,  113,
      108,  155,  114,  150,   70,  115,  157,  116,  109,   69,
       67,  110,  117,  158,  111,   62,  118,  112,   70,   68,
      119,  159,  156,   67,  160,  113,  120,   65,  114,  150,
      170,  115,  157,  116,  171,  172,   62,  673,  117,  158,
       55,  130,  118,   55,   70,  131,  119,  159,  673,  132,
      160,  164,  120,  121,  173,  133,  170,  134,  122,  123,

      171,  172,  124,  165,  137,  125,  126,  130,  138,  127,
      128,  131,  139,  673,  129,  132,  673,  164,  140,  121,
      173,  133,  174,  134,  122,  123,  673,  175,  124,  165,
      137,  125,  126,  176,  138,  127,  128,  177,  139,  166,
      129,  161,  162,  178,  140,  179,  180,  181,  174,  163,
      182,  167,  168,  175,  186,  169,  183,  184,  187,  176,
      185,  188,  191,  177,  192,  166,  673,  161,  162,  178,
      195,  179,  180,  181,  189,  163,  182,  167,  168,  198,
      186,  169,  183,  184,  187,  190,  185,  188,  191,  193,
      192,  201,  194,  196,  202,  199,  195,  200,  197,  203,

      189,  204,  205,  209,  206,  198,  207,  210,  213,  214,
      208,  190,  211,  217,  212,  193,  673,  201,  194,  196,
      202,  199,  220,  200,  197,  203,  221,  204,  205,  209,
      206,  215,  207,  210,  213,  214,  208,  218,  211,  217,
      212,  226,  222,  216,  227,  228,  223,  229,  220,  230,
      231,  219,  221,  232,  236,  234,  224,  215,  225,  237,
      238,  233,  235,  218,  239,  240,  241,  226,  222,  216,
      227,  228,  223,  229,  244,  230,  231,  219,  245,  232,
      236,  234,  224,  242,  225,  237,  238,  233,  235,  246,
      239,  240,  241,  247,  149,  248,  243,  249,  252,  250,

      244,  253,   70,  254,  245,  255,  256,  257,  258,  242,
      259,  261,  262,  260,  263,  246,  264,  265,  266,  247,
      267,  268,  243,  269,  252,  270,  271,  253,   70,  254,
      272,  255,  256,  257,  258,  273,  259,  261,  262,  260,
      263,  274,  264,  265,  266,  276,  267,  268,  277,  269,
      278,  270,  271,  279,  280,  275,  272,  281,  282,  283,
      284,  273,  285,  286,  291,  292,  673,  274,  293,  294,
      295,  276,  296,  287,  277,  297,  278,  288,  298,  279,
      280,  275,  299,  281,  282,  283,  284,  304,  285,  286,
      291,  292,  289,  290,  293,  294,  295,  305,  296,  287,

      300,  297,  306,  288,  298,  302,  307,  303,  299,  308,
      309,  301,  310,  304,  311,  312,  313,  314,  289,  290,
      315,  316,  317,  305,  318,  319,  300,  320,  306,  321,
      322,  302,  307,  303,  323,  308,  309,  301,  310,  324,
      311,  312,  313,  314,  325,  326,  315,  316,  317,  327,
      318,  319,  328,  320,  329,  321,  322,  330,  331,  332,
      323,  333,  334,  335,  336,  324,  337,  338,  339,  340,
      325,  326,  341,  342,  343,  327,  300,  345,  328,  346,
      329,  347,  348,  330,  331,  332,  349,  333,  334,  335,
      336,  350,  337,  338,  339,  340,  351,  352,  341,  342,

      343,  353,  300,  345,  354,  346,  355,  347,  348,  356,
      357,  358,  349,  359,  360,  361,  362,  350,  363,  364,
      365,  366,  351,  352,  367,  368,  369,  353,  370,  371,
      354,  372,  355,  375,  376,  356,  357,  358,  377,  359,
      360,  361,  362,  378,  363,  364,  365,  366,  379,  380,
      367,  368,  369,  381,  370,  371,  373,  372,  374,  375,
      376,  382,  383,  384,  377,  385,  386,  387,  388,  378,
      389,  390,  391,  392,  379,  380,  393,  394,  395,  381,
      396,  397,  373,  398,  374,  399,  402,  382,  383,  384,
      403,  385,  386,  387,  388,  404,  389,  390,  391,  392,

      405,  406,  393,  394,  395,  400,  396,  397,  401,  398,
      407,  399,  402,  408,  411,  409,  403,  410,  412,  413,
      414,  404,  415,  416,  417,  418,  405,  406,  419,  420,
      421,  400,  422,  423,  401,  424,  407,  425,  426,  408,
      411,  409,  427,  410,  412,  413,  414,  428,  415,  416,
      417,  418,  429,  430,  419,  420,  421,  431,  422,  423,
      432,  424,  433,  425,  426,  434,  435,  436,  427,  437,
      438,  439,  440,  428,  441,  442,  443,  444,  429,  430,
      446,  447,  448,  431,  449,  445,  432,  450,  433,  451,
      452,  434,  435,  436,  453,  437,  438,  439,  440,  454,

      441,  442,  443,  444,  455,  456,  446,  447,  448,  457,
      449,  445,  458,  450,  459,  451,  452,  460,  461,  462,
      453,  463,  464,  465,  466,  454,  467,  468,  469,  470,
      455,  456,  471,  472,  473,  457,  475,  476,  458,  477,
      459,  478,  474,  460,  461,  462,  479,  463,  464,  465,
      466,  480,  467,  468,  469,  470,  481,  482,  471,  472,
      473,  484,  475,  476,  485,  477,  486,  478,  474,  487,
      488,  489,  479,  490,  491,  492,  493,  480,  494,  495,
      496,  497,  481,  482,  498,  499,  500,  484,  501,  502,
      485,  503,  486,  504,  505,  487,  488,  489,  506,  490,

      491,  492,  493,  507,  494,  495,  496,  497,  508,  509,
      498,  499,  500,  510,  501,  502,  511,  503,  512,  504,
      505,  513,  514,  515,  506,  516,  517,  518,  519,  507,
      520,  521,  522,  523,  508,  509,  524,  525,  526,  510,
      527,  528,  511,  529,  512,  530,  531,  513,  514,  515,
      532,  516,  517,  518,  519,  533,  520,  521,  522,  523,
      534,  535,  524,  525,  526,  536,  527,  528,  537,  529,
      538,  530,  531,  539,  540,  541,  532,  542,  543,  544,
      545,  533,  546,  547,  548,  549,  534,  535,  550,  551,
      552,  536,  553,  554,  537,  555,  538,  556,  557,  539,

      540,  541,  558,  542,  543,  544,  545,  559,  546,  547,
      548,  549,  560,  561,  550,  551,  552,  562,  553,  554,
      563,  555,  564,  556,  557,  565,  566,  567,  558,  568,
      569,  570,  571,  559,  572,  573,  574,  575,  560,  561,
      576,  577,  578,  562,  579,  580,  563,  581,  564,  582,
      583,  565,  566,  567,  584,  568,  569,  570,  571,  585,
      572,  573,  574,  575,  586,  587,  576,  577,  578,  588,
      579,  580,  589,  581,  590,  582,  583,  591,  592,  593,
      584,  594,  595,  596,  597,  585,  598,  599,  600,  601,
      586,  587,  602,  603,  604,  588,  605,  606,  589,  607,

      590,  608,  609,  591,  592,  593,  610,  594,  595,  596,
      597,  611,  598,  599,  600,  601,  612,  613,  602,  603,
      604,  614,  605,  606,  615,  607,  616,  608,  609,  617,
      619,  618,  610,  620,  621,  622,  623,  611,  624,  625,
      626,  627,  612,  613,  628,  629,  630,  614,  631,  632,
      615,  633,  616,  634,  635,  617,  619,  618,  636,  620,
      621,  622,  623,  637,  624,  625,  626,  627,  638,  639,
      628,  629,  630,  640,  631,  632,  641,  633,  642,  634,
      635,  643,  644,  645,  636,  646,  647,  648,  649,  637,
      650,  651,  652,  653,  638,  639,  654,  655,  656,  640,

      657,  658,  641,  659,  642,  660,  661,  643,  644,  645,
      662,  646,  647,  648,  649,  663,  650,  651,  652,  653,
      664,  665,  654,  655,  656,  666,  657,  658,  667,  659,
      668,  660,  661,  669,  670,  671,  662,  672,  673,  673,
      673,  663,  673,  673,  673,  673,  664,  665,  673,  673,
      673,  666,  673,  673,  667,  673,  668,  673,  673,  669,
      670,  671,  673,  672,   48,   48,   48,   48,   61,   61,
       61,   61,   64,   64,   64,   64,   66,  673,   66,   66,
      148,  148,  148,    7,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673
    } ;

static yyconst flex_int16_t yy_chk[1453] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,   31,    3,    3,  676,    3,    3,    3,    3,    3,
       24,    3,   44,    3,   25,   20,   20,   28,   25,   32,
       32,   28,   24,    3,   20,   24,   24,   31,    3,    3,

        3,   56,    3,   70,  408,   70,   24,   70,   44,   57,
       25,  344,  251,   28,   25,   32,   32,   28,   24,    3,
       20,   24,   24,   58,    3,    3,    3,   56,    3,    4,
        4,    4,   26,    4,    4,   57,    4,    4,    4,    4,
        4,   27,    4,   26,    4,   27,   26,   34,   30,   58,
       30,   27,   33,   27,    4,   34,   33,   59,   26,    4,
        4,    4,   30,    4,  250,  249,   34,   27,  248,   26,
       60,   27,   26,   34,   30,  153,   30,   27,   33,   27,
        4,   34,   33,   59,  152,    4,    4,    4,   30,    4,
       29,   35,   34,   41,   29,   35,   60,   41,   29,  151,

       71,   29,   64,   29,   29,   62,   29,   29,   43,   54,
       54,   29,   43,   53,   36,   72,   29,   35,   54,   41,
       29,   35,   36,   41,   29,   36,   71,   29,   36,   29,
       29,   37,   29,   29,   43,   69,   73,   29,   43,   37,
       36,   72,   37,   69,   54,   37,   74,   37,   36,   67,
       67,   36,   38,   75,   36,   47,   38,   37,   67,   19,
       38,   77,   73,   18,   78,   37,   38,   12,   37,   69,
       83,   37,   74,   37,   84,   85,    9,    7,   38,   75,
        6,   40,   38,    5,   67,   40,   38,   77,    0,   40,
       78,   80,   38,   39,   86,   40,   83,   40,   39,   39,

       84,   85,   39,   80,   42,   39,   39,   40,   42,   39,
       39,   40,   42,    0,   39,   40,    0,   80,   42,   39,
       86,   40,   87,   40,   39,   39,    0,   88,   39,   80,
       42,   39,   39,   89,   42,   39,   39,   91,   42,   81,
       39,   79,   79,   92,   42,   95,   96,   97,   87,   79,
       98,   81,   81,   88,  100,   81,   99,   99,  101,   89,
       99,  103,  105,   91,  106,   81,    0,   79,   79,   92,
      108,   95,   96,   97,  104,   79,   98,   81,   81,  111,
      100,   81,   99,   99,  101,  104,   99,  103,  105,  107,
      106,  113,  107,  110,  114,  112,  108,  112,  110,  115,

      104,  116,  117,  119,  118,  111,  118,  119,  121,  122,
      118,  104,  120,  124,  120,  107,    0,  113,  107,  110,
      114,  112,  126,  112,  110,  115,  126,  116,  117,  119,
      118,  123,  118,  119,  121,  122,  118,  125,  120,  124,
      120,  128,  127,  123,  129,  130,  127,  131,  126,  132,
      133,  125,  126,  134,  136,  135,  127,  123,  127,  137,
      138,  134,  135,  125,  139,  140,  141,  128,  127,  123,
      129,  130,  127,  131,  143,  132,  133,  125,  145,  134,
      136,  135,  127,  142,  127,  137,  138,  134,  135,  146,
      139,  140,  141,  147,  149,  150,  142,  150,  154,  150,

      143,  155,  149,  156,  145,  157,  158,  159,  160,  142,
      161,  162,  163,  161,  164,  146,  165,  166,  167,  147,
      168,  169,  142,  170,  154,  172,  173,  155,  149,  156,
      174,  157,  158,  159,  160,  175,  161,  162,  163,  161,
      164,  176,  165,  166,  167,  177,  168,  169,  178,  170,
      179,  172,  173,  180,  181,  176,  174,  182,  183,  184,
      185,  175,  186,  187,  189,  190,    0,  176,  191,  192,
      193,  177,  196,  188,  178,  197,  179,  188,  198,  180,
      181,  176,  199,  182,  183,  184,  185,  202,  186,  187,
      189,  190,  188,  188,  191,  192,  193,  203,  196,  188,

      200,  197,  204,  188,  198,  201,  205,  201,  199,  206,
      207,  200,  208,  202,  209,  210,  211,  213,  188,  188,
      214,  215,  216,  203,  217,  218,  200,  219,  204,  220,
      221,  201,  205,  201,  222,  206,  207,  200,  208,  223,
      209,  210,  211,  213,  224,  225,  214,  215,  216,  227,
      217,  218,  228,  219,  229,  220,  221,  230,  231,  232,
      222,  233,  234,  235,  237,  223,  238,  239,  240,  241,
      224,  225,  242,  243,  244,  227,  247,  252,  228,  253,
      229,  254,  255,  230,  231,  232,  256,  233,  234,  235,
      237,  257,  238,  239,  240,  241,  258,  259,  242,  243,

      244,  260,  247,  252,  261,  253,  262,  254,  255,  263,
      264,  265,  256,  266,  267,  268,  269,  257,  270,  271,
      272,  273,  258,  259,  274,  275,  276,  260,  277,  278,
      261,  279,  262,  281,  282,  263,  264,  265,  283,  266,
      267,  268,  269,  284,  270,  271,  272,  273,  285,  286,
      274,  275,  276,  287,  277,  278,  280,  279,  280,  281,
      282,  288,  291,  292,  283,  293,  294,  296,  297,  284,
      298,  299,  301,  302,  285,  286,  304,  305,  306,  287,
      307,  310,  280,  312,  280,  313,  315,  288,  291,  292,
      316,  293,  294,  296,  297,  318,  298,  299,  301,  302,

      320,  321,  304,  305,  306,  314,  307,  310,  314,  312,
      322,  313,  315,  323,  327,  326,  316,  326,  328,  329,
      330,  318,  331,  332,  333,  334,  320,  321,  335,  336,
      337,  314,  339,  340,  314,  341,  322,  342,  342,  323,
      327,  326,  343,  326,  328,  329,  330,  345,  331,  332,
      333,  334,  346,  348,  335,  336,  337,  349,  339,  340,
      350,  341,  352,  342,  342,  353,  354,  356,  343,  357,
      358,  359,  360,  345,  361,  362,  363,  364,  346,  348,
      365,  367,  368,  349,  369,  364,  350,  370,  352,  371,
      372,  353,  354,  356,  373,  357,  358,  359,  360,  374,

      361,  362,  363,  364,  375,  378,  365,  367,  368,  379,
      369,  364,  381,  370,  382,  371,  372,  383,  384,  385,
      373,  386,  387,  388,  389,  374,  390,  391,  392,  393,
      375,  378,  395,  397,  398,  379,  399,  400,  381,  401,
      382,  403,  398,  383,  384,  385,  404,  386,  387,  388,
      389,  405,  390,  391,  392,  393,  406,  407,  395,  397,
      398,  409,  399,  400,  410,  401,  411,  403,  398,  413,
      414,  416,  404,  417,  419,  420,  421,  405,  422,  423,
      425,  426,  406,  407,  428,  430,  431,  409,  432,  433,
      410,  434,  411,  435,  436,  413,  414,  416,  438,  417,

      419,  420,  421,  439,  422,  423,  425,  426,  440,  441,
      428,  430,  431,  442,  432,  433,  444,  434,  445,  435,
      436,  446,  447,  448,  438,  449,  450,  451,  452,  439,
      455,  456,  457,  458,  440,  441,  459,  460,  461,  442,
      462,  463,  444,  464,  445,  465,  467,  446,  447,  448,
      468,  449,  450,  451,  452,  469,  455,  456,  457,  458,
      471,  472,  459,  460,  461,  473,  462,  463,  474,  464,
      476,  465,  467,  477,  479,  481,  468,  482,  483,  486,
      487,  469,  490,  491,  492,  493,  471,  472,  494,  496,
      497,  473,  498,  499,  474,  500,  476,  501,  502,  477,

      479,  481,  503,  482,  483,  486,  487,  504,  490,  491,
      492,  493,  505,  507,  494,  496,  497,  508,  498,  499,
      509,  500,  510,  501,  502,  513,  514,  515,  503,  518,
      519,  522,  524,  504,  527,  528,  530,  531,  505,  507,
      532,  533,  534,  508,  538,  540,  509,  542,  510,  543,
      544,  513,  514,  515,  545,  518,  519,  522,  524,  546,
      527,  528,  530,  531,  547,  548,  532,  533,  534,  552,
      538,  540,  554,  542,  555,  543,  544,  556,  557,  558,
      545,  559,  560,  561,  563,  546,  564,  567,  568,  570,
      547,  548,  571,  573,  576,  552,  577,  578,  554,  579,

      555,  581,  582,  556,  557,  558,  583,  559,  560,  561,
      563,  584,  564,  567,  568,  570,  588,  589,  571,  573,
      576,  590,  577,  578,  591,  579,  592,  581,  582,  593,
      594,  593,  583,  595,  597,  602,  603,  584,  604,  605,
      606,  607,  588,  589,  608,  609,  610,  590,  611,  612,
      591,  614,  592,  615,  616,  593,  594,  593,  617,  595,
      597,  602,  603,  619,  604,  605,  606,  607,  621,  622,
      608,  609,  610,  623,  611,  612,  624,  614,  625,  615,
      616,  626,  628,  629,  617,  630,  635,  636,  639,  619,
      640,  642,  643,  647,  621,  622,  649,  650,  651,  623,

      652,  653,  624,  654,  625,  655,  657,  626,  628,  629,
      659,  630,  635,  636,  639,  660,  640,  642,  643,  647,
      661,  662,  649,  650,  651,  663,  652,  653,  664,  654,
      666,  655,  657,  667,  668,  669,  659,  671,    0,    0,
        0,  660,    0,    0,    0,    0,  661,  662,    0,    0,
        0,  663,    0,    0,  664,    0,  666,    0,    0,  667,
      668,  669,    0,  671,  674,  674,  674,  674,  675,  675,
      675,  675,  677,  677,  677,  677,  678,    0,  678,  678,
      679,  679,  679,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int def_flex_debug;
int def_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *deftext;
#line 1 "defscan.l"
#line 2 "defscan.l"
#ifdef _MSC_VER
#pragma warning (disable:4786)
#endif

#ifdef WIN32
#include <io.h>
#endif

#include <string.h>
#include "plGeom.h"
#include "LEFDEFpoint.h"
typedef struct lexsstr
    {
    const char *str;
    int  DoDelete;
    } lexemeStruct;

extern char *strCdup(char *s);
extern int bCaseSens;

#include "parserLEFDEF.h"
#include "defparse.tab.h"


//static int end_of_file = 0;
int defLinenum = 0;
static int errflag = 0;

/* Definitions */
/* chr_lit      \'(({chr})|({quote}))*\' */


#line 1053 "<stdout>"

#define INITIAL 0
#define INSIDEBRACKETS 1
#define HISTORY 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int deflex_destroy (void );

int defget_debug (void );

void defset_debug (int debug_flag  );

YY_EXTRA_TYPE defget_extra (void );

void defset_extra (YY_EXTRA_TYPE user_defined  );

FILE *defget_in (void );

void defset_in  (FILE * in_str  );

FILE *defget_out (void );

void defset_out  (FILE * out_str  );

int defget_leng (void );

char *defget_text (void );

int defget_lineno (void );

void defset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

int defwrap (void ){ return 1; };

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( deftext, defleng, 1, defout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( defin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( defin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, defin))==0 && ferror(defin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(defin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int deflex (void);

#define YY_DECL int deflex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after deftext and defleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 68 "defscan.l"


#line 1245 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! defin )
			defin = stdin;

		if ( ! defout )
			defout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			defensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				def_create_buffer(defin,YY_BUF_SIZE );
		}

		def_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of deftext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 674 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 673 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 70 "defscan.l"
{  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "defscan.l"
{  }            
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 73 "defscan.l"
{  defLinenum++ ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 74 "defscan.l"
{  //printf("K_PLUS\n");
                  deflval.string.DoDelete=0;deflval.string.str="+";return(K_PLUS);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="-";return(K_MINUS);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "defscan.l"
{  
                                                deflval.string.DoDelete=0;deflval.string.str="*";
                                                return(K_STAR);} 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 80 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="=";return(K_ASGN);} 
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="HISTORY";
                                   BEGIN(HISTORY);
                                   return(K_HISTORY);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="DESIGN";
                                   return(K_DESIGN);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 86 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="VIAS";
                                   return(K_VIAS);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 88 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="TECHNOLOGY";
                                       return(K_TECH);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 90 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="DIEAREA";
                                   return(K_DIEAREA);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 92 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="UNITS";
                                   return(K_UNITS);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 94 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="ARRAY";
                                   return(K_ARRAY);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 96 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FLOORPLAN";
                                   return(K_FLOORPLAN);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 98 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="RECT";
                                  return(K_LRECT);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 100 "defscan.l"
{ // printf("K_SITE\n");
                                   deflval.string.DoDelete=0;deflval.string.str="SITE";
                                   return(K_SITE);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 103 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="PINS";
                                   return(K_PINS);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 105 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="DEFAULTCAP";
                                   return(K_DCAPS);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 107 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="MINPINS";
                                   return(K_MINPINS);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 109 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="WIRECAP";
                                   return(K_WIRECAP);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 111 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="TRACKS";
                                   return(K_TRACKS);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 113 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="GCELLGRID";
                                   return(K_GCELLGRID);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 115 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="SYNTHESIZED";
                                   return(K_SYNTH);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 117 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="DO";
                                   return(K_DO); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 119 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="BY";
                                   return(K_BY);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 121 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="STEP";
                                   return(K_STEP);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 123 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="LAYER";
                                   return(K_LAYER);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 125 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="XTALK";
                                   return(K_XTALK);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 127 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="COMPONENTS";
                                   return(K_COMPS);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 129 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="GENERATE";
                                   return(K_COMP_GEN);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 131 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="SOURCE";
                                 return(K_SOURCE);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 133 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="WEIGHT";
                                 return(K_WEIGHT);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 135 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FIXED";
                               return(K_FIXED);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 137 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="COVER";
                                return(K_COVER);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 139 "defscan.l"
{ // printf("K_PLACED\n");
                                deflval.string.DoDelete=0;deflval.string.str="PLACED";
                                return(K_PLACED);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 142 "defscan.l"
{ 
                                deflval.string.DoDelete=0;deflval.string.str="UNPLACED";
                                return(K_UNPLACED);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 145 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FOREIGN";
                                  return(K_FOREIGN);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 147 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="REGION";
                                 return(K_REGION);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 149 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="SPECIALNETS";
                                      return(K_SNETS);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 151 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="NETS";
                               return(K_NETS);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 153 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="MUSTJOIN";
                                  return(K_MUSTJOIN);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 155 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="ORIGINAL";
                                   return(K_ORIGINAL);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 157 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="USE";
                              return(K_USE);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 159 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="ORDERED";
                                  return(K_ORDER);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 161 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FLOATING";
                                   return(K_FLOAT);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 163 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="SCANCHAINS";
                                  return(K_SCAN);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 165 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="COMMONSCANPINS";
                                  return(K_COMM_SCAN);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 167 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="START";
                                return(K_START);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 169 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="STOP";
                               return(K_STOP);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 171 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="VERSION";
                               return(K_VERSION);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 173 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="PATTERNNAME";
                               return(K_PATTERNNAME);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 175 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="ROW";
                               return(K_ROW);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 177 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="SIGNAL";
                               return(K_SIGNAL);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 179 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="POWER";
                               return(K_POWER);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 181 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="GROUND";
                               return(K_GROUND);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 183 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="CLOCK";
                               return(K_CLOCK);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 185 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="TIEOFF";
                               return(K_TIEOFF);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 187 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="ANALOG";
                               return(K_ANALOG);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 189 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="REGIONS";
                               return(K_REGIONS);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 191 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="PROPERTY";
                               return(K_PROPERTY);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 193 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="NAMESCASESENSITIVE";return(K_CASE);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 194 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="ON";
                               return(K_ON);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 196 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="OFF";
                               return(K_OFF);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 198 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="PROPERTYDEFINITIONS";return(K_PROPERTYDEFINITIONS);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 199 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="SPECIALNET";return(K_SPECIALNET);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 200 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="GROUP";return(K_GROUP);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 201 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="COMPONENTPIN";return(K_COMPONENTPIN);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 202 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="INTEGER";return(K_INTEGER);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 203 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="REAL";return(K_REAL);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 204 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="STRING";return(K_STRING);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 205 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="RANGE";return(K_RANGE);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 206 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="COMPONENT";return(K_COMPONENT);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 207 "defscan.l"
{  deflval.string.DoDelete=1;
                               deflval.string.str=strCdup(deftext);
                               return(K_X);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 210 "defscan.l"
{  deflval.string.DoDelete=1;
                               deflval.string.str=strCdup(deftext);
                               return(K_Y);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 213 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="INOUT";return(K_INOUT);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 214 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="INPUT";return(K_INPUT);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 215 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="OUTPUT";return(K_OUTPUT);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 216 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="TRISTATE";return(K_TRISTATE);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 217 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="DIRECTION";return(K_DIRECTION);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 218 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="SPECIAL";return(K_SPECIAL);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 219 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="SHAPE";return(K_SHAPE);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 220 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="ABUTMENT";return(K_ABUTMENT);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 221 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="RING";return(K_RING);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 222 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="FEEDTHRU";return(K_FEEDTHRU);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 223 "defscan.l"
{deflval.string.DoDelete=0;deflval.string.str="TAPER";return(K_TAPER);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 225 "defscan.l"
{  deflval.string.DoDelete=1;
                                 deflval.string.str=strCdup(deftext); //KLUDGE
                                 return(K_IN);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 228 "defscan.l"
{  deflval.string.DoDelete=1;
                                  deflval.string.str=strCdup(deftext); //KLUDGE
                                  return(K_OUT);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 231 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="PATTERN";
                                  return(K_PATTERN);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 233 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="SCANFIX";
                                  return(K_SCANFIX);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 235 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="ESTCAP";
                                 return(K_ESTCAP);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 237 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="ROUTED";
                                 return(K_ROUTED);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 239 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="NEW";
                              return(K_NEW);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 241 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="WIDTH";
                                return(K_WIDTH);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 243 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="VOLTAGE";
                                  return(K_VOLTAGE);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 245 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="SPACING";
                                  return(K_SPACING);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 247 "defscan.l"
{  //printf("K_N\n");
                           deflval.string.DoDelete=1;
                           deflval.string.str=strCdup(deftext);
                           return(K_N);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 251 "defscan.l"
{  deflval.string.DoDelete=1;
                            deflval.string.str=strCdup(deftext);
                            return(K_S);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 254 "defscan.l"
{  deflval.string.DoDelete=1;
                            deflval.string.str=strCdup(deftext);
                            return(K_E);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 257 "defscan.l"
{  deflval.string.DoDelete=1;
                            deflval.string.str=strCdup(deftext);
                            return(K_W);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 260 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FN";
                            return(K_FN);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 262 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FE";
                            return(K_FE);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 264 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FS";
                            return(K_FS);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 266 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FW";
                            return(K_FW);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 268 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="GROUPS";
                                return(K_GROUPS);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 270 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="START_GROUP";
                                     return(K_START_GROUP);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 272 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="SOFT";
                               return(K_SOFT);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 274 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="MAXX";
                               return(K_MAXX);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 276 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="MAXY";
                               return(K_MAXY);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 278 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="MAXHALFPERIMETER";
                                          return(K_MAXHALFPERIMETER);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 280 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="CONSTRAINTS";
                                      return(K_CONSTRAINTS);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 282 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="NET";
                                                      return(K_NET);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 284 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="PATH";
                                                      return(K_PATH);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 286 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="RISEMIN";
                                  return(K_RISEMIN);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 288 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="RISEMAX";
                                  return(K_RISEMAX);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 290 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FALLMIN";
                                  return(K_FALLMIN);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 292 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FALLMAX";
                                  return(K_FALLMAX);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 294 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="WIREDLOGIC";
                                    return(K_WIREDLOGIC);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 296 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="MAXDIST";
                                  return(K_MAXDIST);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 298 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="ASSERTIONS";
                                    return(K_ASSERTIONS);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 300 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="SUM";
                              return(K_SUM);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 302 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="DISTANCE";
                                   return(K_DISTANCE);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 304 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="MICRONS";
                                  return(K_MICRONS);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 306 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="LE";
                             return(K_LE);}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 308 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="GE";
                             return(K_GE);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 310 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="NE";
                             return(K_NE);}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 312 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="END";
                             return(K_END);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 314 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="BUSBITCHARS";
                             return(K_BUSBITCHARS);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 316 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="DIVIDERCHAR";
                             return(K_DIVIDERCHAR);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 318 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="VARIABLE";
                             return(K_VARIABLE);}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 320 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="SLEWRATE";
                             return(K_SLEWRATE);}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 322 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="RISE";
                             return(K_RISE);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 324 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FALL";
                             return(K_FALL);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 326 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="CAPACITANCE";
                             return(K_CAPACITANCE);}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 328 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="DRIVECELL";
                             return(K_DRIVECELL);}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 330 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="FROMPIN";
                             return(K_FROMPIN);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 332 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="TOPIN";
                             return(K_TOPIN);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 334 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="PARALLEL";
                             return(K_PARALLEL);}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 336 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="PIN";
                             return(K_PIN);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 338 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="IOTIMINGS";
                             return(K_IOTIMINGS);}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 340 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="PINPROPERTIES";
                             return(K_PINPROPERTIES);} 
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 342 "defscan.l"
{  deflval.string.DoDelete=0;deflval.string.str="STRIPE";
                             return(K_STRIPE);} 
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 345 "defscan.l"
{return(K_COMMA);}   
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 346 "defscan.l"
{ BEGIN(INITIAL); return(K_SEMCOL);}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 347 "defscan.l"
{  return(K_DOT_DOT);}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 348 "defscan.l"
{  return(K_DOT);}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 349 "defscan.l"
{  return(K_COLON);}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 350 "defscan.l"
{  BEGIN(INSIDEBRACKETS);return(K_ORDBR1);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 351 "defscan.l"
{  return(QUOTED_STR);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 352 "defscan.l"
{
                   unsigned int idx;
                   for (idx=0;idx<strlen(deftext);idx++)
                       {
                       if (deftext[idx] == '\n') defLinenum++;
                       }
                   return(STRING_not_keyword);
                   }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 360 "defscan.l"
{  BEGIN(INITIAL);return(K_ORDBR2);}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 361 "defscan.l"
{   //printf("\n<>NUMBER %s<>\n", deftext);
                                    deflval.dval=atof(deftext);
                                    return(NUMBER);} 
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 364 "defscan.l"
{deflval.dval=atof(deftext);return(NUMBER);}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 365 "defscan.l"
{deflval.dval=atof(deftext);return(NUMBER);}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 366 "defscan.l"
{   
                             //printf("\n<><>STRING %s<><>\n", deftext);
                             deflval.string.DoDelete=1;deflval.string.str = strCdup(deftext) ;
                             return(STRING_not_keyword);}  
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 370 "defscan.l"
{  
            printf("\nDEF scan error on line number %d\n",defLinenum);
            errflag = 2;
            fflush(stdout);
            fflush(stderr);
            if (0) yyunput(0,NULL); //kill silly compiler warning
            exit(-1);
            }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 379 "defscan.l"
ECHO;
	YY_BREAK
#line 2261 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INSIDEBRACKETS):
case YY_STATE_EOF(HISTORY):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed defin at a new source and called
			 * deflex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = defin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( defwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * deftext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of deflex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					defrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			defrestart(defin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) defrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 674 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 674 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 673);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up deftext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					defrestart(defin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( defwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve deftext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void defrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        defensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            def_create_buffer(defin,YY_BUF_SIZE );
	}

	def_init_buffer(YY_CURRENT_BUFFER,input_file );
	def_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void def_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		defpop_buffer_state();
	 *		defpush_buffer_state(new_buffer);
     */
	defensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	def_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (defwrap()) processing, but the only time this flag
	 * is looked at is after defwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void def_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	defin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE def_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) defalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in def_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) defalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in def_create_buffer()" );

	b->yy_is_our_buffer = 1;

	def_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with def_create_buffer()
 * 
 */
    void def_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		deffree((void *) b->yy_ch_buf  );

	deffree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a defrestart() or at EOF.
 */
    static void def_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	def_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then def_init_buffer was _probably_
     * called from defrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void def_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		def_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void defpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	defensure_buffer_stack();

	/* This block is copied from def_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from def_switch_to_buffer. */
	def_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void defpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	def_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		def_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void defensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)defalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in defensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)defrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in defensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE def_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) defalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in def_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	def_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to deflex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       def_scan_bytes() instead.
 */
YY_BUFFER_STATE def_scan_string (yyconst char * yystr )
{
    
	return def_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to deflex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE def_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) defalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in def_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = def_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in def_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up deftext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		deftext[defleng] = (yy_hold_char); \
		(yy_c_buf_p) = deftext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		defleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int defget_lineno  (void)
{
        
    return deflineno;
}

/** Get the input stream.
 * 
 */
FILE *defget_in  (void)
{
        return defin;
}

/** Get the output stream.
 * 
 */
FILE *defget_out  (void)
{
        return defout;
}

/** Get the length of the current token.
 * 
 */
int defget_leng  (void)
{
        return defleng;
}

/** Get the current token.
 * 
 */

char *defget_text  (void)
{
        return deftext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void defset_lineno (int  line_number )
{
    
    deflineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see def_switch_to_buffer
 */
void defset_in (FILE *  in_str )
{
        defin = in_str ;
}

void defset_out (FILE *  out_str )
{
        defout = out_str ;
}

int defget_debug  (void)
{
        return def_flex_debug;
}

void defset_debug (int  bdebug )
{
        def_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from deflex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    defin = stdin;
    defout = stdout;
#else
    defin = (FILE *) 0;
    defout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * deflex_init()
     */
    return 0;
}

/* deflex_destroy is for both reentrant and non-reentrant scanners. */
int deflex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		def_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		defpop_buffer_state();
	}

	/* Destroy the stack itself. */
	deffree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * deflex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *defalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *defrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void deffree (void * ptr )
{
	free( (char *) ptr );	/* see defrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 379 "defscan.l"




/* QSTRING                         {  return(QSTRING);}*/
/* STRING                          {  return(STRING);} */
/* SITE_PATTERN                    {  return(SITE_PATTERN);} */
/* NUMBER                          {  return(NUMBER);} */
/* {chr_lit}        {  return(K_CHAR_CONST);} */

