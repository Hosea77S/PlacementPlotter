
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer lef_create_buffer
#define yy_delete_buffer lef_delete_buffer
#define yy_flex_debug lef_flex_debug
#define yy_init_buffer lef_init_buffer
#define yy_flush_buffer lef_flush_buffer
#define yy_load_buffer_state lef_load_buffer_state
#define yy_switch_to_buffer lef_switch_to_buffer
#define yyin lefin
#define yyleng lefleng
#define yylex leflex
#define yylineno leflineno
#define yyout lefout
#define yyrestart lefrestart
#define yytext leftext

#define yyalloc lefalloc
#define yyrealloc lefrealloc
#define yyfree leffree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE lefrestart(lefin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int lefleng;

extern FILE *lefin, *lefout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up leftext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up leftext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via lefrestart()), so that the user can continue scanning by
	 * just pointing lefin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when leftext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int lefleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow lefwrap()'s to do buffer switches
 * instead of setting up a fresh lefin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void lefrestart (FILE *input_file  );
void lef_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE lef_create_buffer (FILE *file,int size  );
void lef_delete_buffer (YY_BUFFER_STATE b  );
void lef_flush_buffer (YY_BUFFER_STATE b  );
void lefpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void lefpop_buffer_state (void );

static void lefensure_buffer_stack (void );
static void lef_load_buffer_state (void );
static void lef_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER lef_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE lef_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE lef_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE lef_scan_bytes (yyconst char *bytes,int len  );

void *lefalloc (yy_size_t  );
void *lefrealloc (void *,yy_size_t  );
void leffree (void *  );

#define yy_new_buffer lef_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        lefensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            lef_create_buffer(lefin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        lefensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            lef_create_buffer(lefin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *lefin = (FILE *) 0, *lefout = (FILE *) 0;

typedef int yy_state_type;

extern int leflineno;

int leflineno = 1;

extern char *leftext;
#define yytext_ptr leftext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up leftext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	lefleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 234
#define YY_END_OF_BUFFER 235
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1214] =
    {   0,
        0,    0,  235,  233,    2,    3,  232,  233,    1,  226,
      227,    6,    4,  221,    5,  224,  229,  225,  222,    7,
      232,  232,  232,  232,   47,  232,  232,  232,  232,  232,
      232,  107,  232,  232,  232,  159,  232,  232,  232,  215,
      219,  220,    2,  232,    0,  228,    1,    0,  229,  232,
      229,  223,  231,  232,  232,  232,  232,  232,  232,  232,
      232,   22,  232,  232,  232,  232,  232,  232,  232,  232,
       46,  232,  232,  232,  232,   65,  232,   68,  232,  232,
       72,  232,   73,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  119,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  188,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  231,    0,  232,    0,  232,  230,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,   36,  232,  232,
      232,  232,  232,  232,  232,  232,   53,   54,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

       93,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  115,  117,  232,  232,  232,
      232,  127,  232,  232,  129,  232,  232,  232,  232,  232,
      137,  232,  232,  141,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  201,  232,  232,  207,
      208,  232,  212,  232,  232,  232,    0,  230,    0,  232,
      231,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,   29,  232,  232,  232,

      232,   37,  232,  232,  232,  232,  232,  232,  232,  232,
       56,  232,  232,  232,  232,  232,  232,  232,  232,  232,
       78,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  116,  232,  232,  232,  128,  232,  232,  232,
      133,  232,  135,  232,  232,  232,  232,  143,  144,  232,
      147,  148,  232,  232,  232,  232,  232,  232,  232,  166,
      167,  168,  232,  232,  232,  173,  232,  232,  232,  232,
      232,  232,  232,  232,  186,  232,  232,  232,  232,  232,

      232,  232,  232,  197,  232,  232,  232,  232,  203,  232,
      232,  232,  232,  232,  232,  232,  232,  231,  232,  232,
      232,  232,  232,   17,   18,  232,  232,  232,  232,  232,
      232,   27,   28,  232,   30,  232,  232,  232,  232,   41,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,   80,   81,  232,  232,  232,  232,  232,  232,
       91,  232,  232,  232,   96,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  131,  232,  232,

      136,  232,  232,  142,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  161,  163,  232,  232,  232,  232,  232,
      172,  232,  232,  232,  177,  232,  232,  232,  232,  232,
      189,  232,  232,  232,  232,  232,  232,  232,  200,  232,
      232,  232,  232,  232,  232,  232,  232,  214,  216,  232,
      232,  232,    9,   10,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,   42,  232,  232,
      232,  232,  232,   55,   58,   57,  232,  232,   61,  232,
      232,  232,  232,  232,  232,  232,  232,  232,   76,   77,
      232,  232,  232,  232,  232,  232,   87,   88,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      118,  120,  121,  232,  232,  232,  232,  232,  232,  232,
      232,  150,  149,  232,  232,  153,  232,  232,  232,  158,
      232,  232,  232,  165,  169,  170,  232,  174,  232,  232,
      232,  232,  232,  232,  232,  183,  184,  187,  232,  232,
      232,  193,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,   16,  232,  232,
      232,  232,  232,  232,  232,  232,  232,   35,  232,   39,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,   69,   70,  232,  232,  232,  232,  232,  232,  232,
       85,  232,   89,  232,   92,  232,   94,  232,  232,   99,
      232,  101,  232,  232,  232,  105,  232,  232,  232,  110,
      232,  232,  232,  232,  232,  232,  232,  232,  126,  232,
      132,  134,  232,  232,  232,  232,  232,  232,  232,  232,
      157,  160,  232,  232,  171,  232,  232,  232,  232,  232,
      232,  182,  185,  190,  232,  232,  232,  232,  232,  232,
      232,  232,  205,  232,  209,  232,  232,  213,  217,  232,
        8,  232,  232,  232,  232,  232,  232,  232,  232,   24,
      232,  232,  232,  232,  232,   38,  232,  232,  232,  232,

      232,   49,  232,  232,  232,  232,  232,   66,  232,   71,
      232,   75,  232,  232,  232,  232,  232,  232,  232,  232,
       98,  232,  232,  232,  232,  106,  232,  232,  232,  232,
      232,  114,  232,  232,  232,  125,  232,  138,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  176,
      232,  232,  232,  232,  232,  192,  232,  196,  232,  232,
      232,  204,  206,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,   45,  232,  232,  232,  232,  232,   59,  232,  232,
      232,   67,   74,  232,  232,  232,  232,   86,   90,  232,

      232,  232,  102,  232,  232,  232,  232,  232,  232,  113,
      232,  232,  232,  232,  232,  232,  232,  146,  232,  151,
      232,  232,  232,  162,  164,  175,  178,  232,  232,  181,
      232,  232,  198,  232,  232,  232,  232,  232,  232,  232,
      232,  232,   19,  232,  232,  232,  232,  232,  232,   33,
      232,   40,   43,  232,  232,  232,  232,   63,  232,   62,
      232,   79,  232,  232,  232,  232,  232,  232,  103,  104,
      232,  232,  111,  232,  232,  232,  232,  130,  232,  232,
      145,  155,  232,  154,  232,  232,  232,  232,  194,  232,
      232,  232,  232,  232,  232,  232,  232,   15,   20,   21,

      232,   25,  232,  232,  232,  232,   44,  232,  232,  232,
      232,  232,  232,  232,  232,  232,   97,  232,  232,  109,
      232,  232,  232,  232,  232,  140,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  211,  232,  232,  232,  232,
       23,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  179,  232,  232,  232,  232,  210,
      232,  232,  232,  232,  232,   26,  232,  232,   34,  232,
      232,  232,   60,  232,  232,  232,  232,  232,  100,  232,
      232,  232,  232,  232,  232,  152,  232,  232,  232,  232,

      232,  232,  218,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  112,  232,
      232,  232,  232,  232,  180,  191,  195,  232,  232,  232,
      232,  232,  232,  232,   32,   48,  232,  232,  232,  232,
      232,  232,   95,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,   13,  232,   31,  232,  232,  232,  232,
       84,  232,  232,  232,  232,  122,  232,  232,  232,  232,
       11,  232,  232,  232,  232,  232,  232,  232,  232,  123,
      232,  232,  232,  232,  232,  232,   14,  232,   50,   51,
      232,  232,  232,  108,  232,  232,  232,  232,  202,   12,

       52,  232,   82,   83,  232,  139,  232,  232,   64,  124,
      156,  199,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    4,    1,    1,    1,    7,
        8,    9,   10,   11,   12,   13,    4,   14,   15,   16,
       17,   17,   17,   17,   17,   17,   18,   19,   20,    4,
       21,    4,    1,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
        4,    4,    4,    1,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    4,   75,    4,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    3,    1,    3,    3,    3,    3,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1217] =
    {   0,
        0,    0,  175, 2576,  171, 2576,    0,  165,    0,    0,
        0, 2576,   63, 2576,   69,   75,   81,    0, 2576,    0,
       77,   69,   81,  125,   84,  167,   82,  123,  117,  141,
      175,  155,  222,  217,  232,  275,  327,  175,  379,   74,
        0,    0,  166,    0,  161, 2576,    0,  336,  354,  344,
      403,    0,  371,  433,   71,   85,  173,  118,  129,  128,
      132,    0,  236,  257,  182,  187,  269,  202,  371,  276,
        0,  227,  222,  238,  234,  273,  267,    0,  270,  277,
        0,  279,    0,  291,  283,  311,  325,  394,  416,  339,
      339,  116,  329,  433,  356,  438,  354,  434,  356,  379,

      371,  431,  363,  383,  429,    0,  434,  424,  444,  462,
      476,  468,  473,  442,  148,  442,  491,  481,  464,  492,
      485,  479,  502,  509,  492,  483,  510,  531,  520,  532,
      530,  535,  525,  541,  528,  544,  541,  533,  534,  545,
      554,  543,  552,  570,  599,  614,  623,  628,  633,  639,
      550,  577,  625,  633,  634,  639,  638,  622,  641,  630,
      644,  628,  645,  644,  645,  633,  634,    0,  653,  654,
      655,  649,  647,  655,  652,  658,    0,  677,  679,  688,
      678,  689,  682,  693,  685,  693,  678,  693,  697,  693,
      682,  683,  727,  701,  690,  691,  690,  706,  701,  706,

        0,  696,  697,  696,  740,  733,  728,  735,  742,  729,
      745,  736,  748,  735,  761,    0,  737,  738,  753,  746,
      745,    0,  756,  751,    0,  764,  743,  749,  781,  783,
        0,  782,  787,    0,  793,  790,  783,  795,  798,  801,
      787,  790,  805,  790,  796,  805,  802,  812,  813,  803,
      802,  818,  819,  807,  815,  827,  830,  849,  845,  849,
      847,  852,  842,  859,  848,  850,  859,  864,  855,    0,
      858,  858,    0,  870,  874,  891,  917,  931,  936,  941,
      946,  905,  897,  905,  908,  940,  923,  939,  936,  943,
      938,  942,  952,  935,  938,  947,    0,  954,  942,  942,

      957,  961,  943,  940,  959,  962,  965,  965,  994,  971,
      995,  953,  956,  967,  986,  984,  993,  988,  993, 1000,
        0,  983,  990,  991, 1009, 1009, 1001, 1005, 1020, 1021,
     1005, 1025, 1007, 1027, 1015, 1046, 1047, 1041, 1046, 1044,
     1051, 1056, 1053, 1053, 1045, 1046, 1062, 1062, 1063, 1055,
     1056, 1066,    0, 1063, 1052, 1068,    0, 1068, 1067, 1070,
        0, 1077,    0, 1064, 1079, 1101, 1101,    0,    0, 1091,
        0, 1109, 1104, 1095, 1101, 1100, 1112, 1104, 1118,    0,
        0,    0, 1117, 1116, 1111,    0, 1109, 1121, 1121, 1125,
     1123, 1126, 1121, 1132,    0, 1145, 1146, 1159, 1160, 1158,

     1157, 1150, 1150,    0, 1166, 1153, 1168, 1169,    0, 1174,
     1167, 1168, 1157, 1170, 1188, 1173, 1179, 1224, 1178, 1180,
     1181, 1199, 1207,    0,    0, 1209, 1203, 1204, 1224, 1217,
     1215,    0,    0, 1225,    0, 1212, 1216, 1230, 1220,    0,
     1219, 1232, 1216, 1232, 1237, 1238, 1226, 1224, 1225, 1260,
     1274, 1231, 1239, 1232, 1261, 1267, 1268, 1271, 1278, 1276,
     1261, 1268, 1268, 1271, 1281, 1275, 1270, 1275, 1272, 1291,
        0, 1287, 1288, 1279,    0, 1280, 1288, 1300, 1287, 1301,
     1321, 1325, 1316, 1316, 1329, 1328, 1327, 1315, 1330, 1315,
     1337, 1319, 1326, 1321, 1342, 1344, 1345,    0, 1332, 1341,

        0, 1332, 1336,    0, 1332, 1335, 1336, 1368, 1383, 1341,
     1370, 1368, 1381, 1367,    0, 1377, 1377, 1385, 1374, 1379,
        0, 1387, 1375, 1377, 1397, 1385, 1393, 1380, 1398, 1398,
        0, 1400, 1389, 1402, 1391, 1414, 1433, 1424,    0, 1421,
     1426, 1439, 1427, 1440, 1432, 1432, 1439,    0,    0, 1446,
     1424, 1435,    0,    0, 1450, 1447, 1441, 1451, 1440, 1453,
     1437, 1438, 1440, 1458, 1443, 1445, 1457,    0, 1468, 1483,
     1475, 1478, 1475,    0,    0,    0, 1476, 1492,    0, 1480,
     1487, 1482, 1489, 1488, 1489, 1490, 1488, 1487,    0,    0,
     1494, 1500, 1495, 1502, 1494, 1494,    0,    0, 1509, 1504,

     1512, 1498, 1506, 1523, 1545, 1543, 1526, 1530, 1537, 1550,
     1532, 1534, 1545, 1554, 1553, 1552, 1558, 1559, 1556, 1542,
        0,    0, 1549, 1550, 1550, 1550, 1556, 1566, 1552, 1562,
     1595,    0,    0, 1580, 1596,    0, 1584, 1591, 1598,    0,
     1586, 1598, 1607,    0,    0,    0, 1602,    0, 1589, 1593,
     1589, 1605, 1601, 1611, 1609,    0, 1600,    0, 1599, 1600,
     1613,    0, 1602, 1604, 1620, 1607, 1632, 1638, 1640, 1654,
     1651, 1645, 1653, 1644, 1641, 1642, 1678,    0, 1660, 1658,
     1660, 1666, 1666, 1671, 1664, 1665, 1666, 1657, 1673, 1677,
     1675, 1689, 1705, 1708, 1705, 1708, 1689, 1708, 1694, 1694,

     1715,    0,    0, 1705, 1712, 1717, 1703, 1711, 1717, 1713,
        0, 1720,    0, 1725,    0, 1724,    0, 1721, 1709,    0,
     1739,    0, 1729, 1727, 1730,    0, 1744, 1743, 1748,    0,
     1762, 1744, 1748, 1762, 1753, 1760, 1765, 1766,    0, 1774,
        0,    0, 1751, 1763, 1765, 1758, 1778, 1759, 1778, 1764,
        0,    0, 1773, 1780,    0, 1770, 1774, 1792, 1792, 1792,
     1797,    0,    0,    0, 1816, 1798, 1810, 1815, 1802, 1821,
     1803, 1819,    0, 1815,    0, 1824, 1815,    0,    0, 1826,
        0, 1815, 1829, 1830, 1827, 1831, 1831, 1839, 1838,    0,
     1828, 1836, 1838, 1836, 1844,    0, 1865, 1861, 1857, 1864,

     1870, 1855, 1855,  139, 1865, 1859, 1880,    0, 1869,    0,
     1880,    0, 1884, 1886, 1869, 1888, 1887, 1872, 1874, 1885,
        0, 1877, 1877, 1886, 1889,    0, 1904, 1899, 1908, 1912,
     1905,    0, 1917, 1913, 1909,    0, 1925, 1926, 1913, 1929,
     1930, 1916,  107, 1926, 1920, 1940, 1937, 1938, 1939,    0,
     1926, 1941, 1930, 1930, 1947,    0, 1945,    0, 1942, 1951,
     1959,    0,    0, 1960, 1969, 1965, 1975, 1967, 1962, 1957,
     1964, 1977, 1968, 1968, 1988, 1980, 1979, 1975, 1975, 1981,
     1995,    0, 1998, 1991, 1999, 1995, 1986,    0, 2005, 2007,
     2010,    0,    0, 2009, 2014, 2027, 2019,    0,    0, 2029,

     2032, 2028,    0, 2018, 2033, 2020, 2036, 2038, 2025,    0,
     2027, 2046, 2040, 2031, 2046, 2047, 2048,    0, 2036,    0,
     2047, 2049, 2051,    0,    0,    0,    0, 2054, 2060,    0,
     2060, 2061,    0, 2068, 2066, 2080, 2069, 2070, 2089, 2084,
     2091, 2088,    0, 2074, 2078, 2083, 2095, 2092, 2102,    0,
     2085,    0,    0, 2086, 2085, 2105, 2089,    0, 2097,    0,
     2106,    0, 2092, 2110, 2105, 2110, 2131, 2139,    0,    0,
     2136, 2123,    0, 2125, 2139, 2131, 2127,    0, 2141, 2129,
        0,    0, 2138,    0, 2148, 2135, 2150, 2142, 2138, 2144,
     2152, 2141, 2157, 2155, 2159, 2146, 2164,    0,    0,    0,

     2152,    0, 2174, 2182, 2189, 2191,    0, 2194, 2184, 2192,
     2189, 2179, 2195, 2200, 2197, 2197,    0, 2193, 2194,    0,
     2188, 2198, 2192, 2193, 2205,    0, 2206, 2196, 2209, 2200,
     2206, 2221, 2222, 2215, 2229,    0, 2229, 2247, 2241, 2249,
        0, 2233, 2249, 2251, 2249, 2241, 2251, 2240, 2242, 2255,
     2251, 2248, 2253, 2253, 2262, 2251, 2260, 2272, 2269, 2283,
     2271, 2267, 2283, 2283,    0, 2290, 2290, 2285, 2300,    0,
     2292, 2304, 2302, 2291, 2305,    0, 2293, 2303,    0, 2313,
     2311, 2311,    0, 2302, 2307, 2315, 2309, 2312,    0, 2317,
     2322, 2310, 2324, 2325, 2332,    0, 2327, 2338, 2331, 2352,

     2353, 2340,    0, 2340, 2360, 2357, 2349, 2349, 2362, 2364,
     2369, 2356, 2368, 2373, 2366, 2375, 2373, 2358,    0, 2373,
     2367, 2379, 2372, 2388,    0,    0,    0, 2382, 2391, 2391,
     2407, 2410, 2405, 2395,    0,    0, 2411, 2403, 2397, 2398,
     2404, 2402,    0, 2414, 2415, 2424, 2422, 2419, 2410, 2429,
     2416, 2414, 2414,    0, 2415,    0, 2416, 2442, 2439, 2440,
        0, 2444, 2438, 2450, 2446,    0, 2451, 2459, 2450, 2457,
        0, 2455, 2463, 2457,  109, 2460, 2451, 2452, 2474,    0,
     2472, 2468, 2468, 2477, 2481, 2468,    0, 2470,    0,    0,
     2477, 2485, 2495,    0, 2475, 2484, 2495, 2505,    0,    0,

        0, 2514,    0,    0, 2514,    0, 2516, 2507,    0,    0,
        0,    0, 2576,  117, 2569, 2572
    } ;

static yyconst flex_int16_t yy_def[1217] =
    {   0,
     1213,    1, 1213, 1213, 1213, 1213, 1214, 1215, 1216, 1214,
     1214, 1213, 1213, 1213, 1214, 1214, 1214, 1214, 1213, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1213, 1214, 1215, 1213, 1216, 1213, 1213, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1213, 1213, 1214, 1213, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1213, 1213, 1213, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1213, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214,    0, 1213, 1213, 1213
    } ;

static yyconst flex_int16_t yy_nxt[2652] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
        7,    7,   30,   31,   32,   33,   34,    7,   35,   36,
       37,   38,   39,   40,   41,   42,    7,    7,   21,   22,
       23,   24,   25,   26,   27,   28,   29,    7,    7,   30,
       31,   32,   33,   34,    7,   35,   36,   37,   38,   39,
       40,   41,   42,    7,    7,   48,   49,   49,   49,   49,
       49,   50,   51,   51,   51,   51,   51,   52,   53,   53,
       53,   53,   53,   50,   51,   51,   51,   51,   51,   55,

       56,   59,   63,  144,   60,   84,   54,   85,   72,   73,
       61,   57,  151,   64,   62,   58,   65,   66,   74,   44,
       86,  920,   67, 1189, 1190,  152,   55,   56,   59,   63,
      144,   60,   84,   54,   85,   72,   73,   61,   57,  151,
       64,   62,   58,   65,   66,   74,   68,   86,   87,   67,
       69,   89,  152,  888,   70,   90,  156,   91,   88,   92,
       71,  234,   93,  197,  157,   46,   94,   43,  158,   46,
       95,  159,   43,   68, 1213,   87,  100,   69,   89, 1213,
      101,   70,   90,  156,   91,   88,   92,   71,   75,   93,
      102,  157,   76,   94,  153,  158,   96,   95,  159,   77,

       97,   78,   79,  100,   98,   80,   81,  101,   82,  136,
       83, 1213,  166,  154,  137,   75,   99,  102,  155,   76,
      164,  153, 1213,   96,  165, 1213,   77,   97,   78,   79,
     1213,   98,   80,   81, 1213,   82,  136,   83,  110,  166,
      154,  137,  169,   99,  103,  155,  111,  164,  104,  115,
      105,  165,  112,  116,  176,  113,  106,  117,  114,  177,
      107,  118,  178,  108,  109,  110,  179,  119,  120,  169,
      160,  103,  161,  111, 1213,  104, 1213,  105,  162,  112,
      116,  176,  113,  106,  117,  114,  177,  107,  118,  178,
      108,  109,  163,  179,  119,  120,  121,  160,  180,  161,

      122,  173,  181,  123,  124,  162,  125,  167,  182,  168,
      126,  127,  183,  184,  174,  128,  185,  186,  175,  163,
      129, 1213, 1213,  121, 1213,  180, 1213,  122,  173,  181,
      123,  124, 1213,  125,  167,  182,  168,  126,  127,  183,
      184,  174,  128,  185,  186,  175,  187,  129,  130,  145,
      145,  145,  145,  145,  188,  131,  132,   53,   53,   53,
       53,   53,  133,  195,  196,  134,   48,   49,   49,   49,
       49,   49,  135,  187,  198,  130, 1213, 1213,  202,  146,
     1213,  188,  131,  132,   53,   53,   53,   53,   53,  133,
      195,  196,  134, 1213,  206,  210,  147,  170,  213,  135,

      138,  198,  216,  171,  139,  202,  146,  140,  141,  217,
      172,  142,  211,  212,  143,   50,   51,   51,   51,   51,
       51,  206,  210,  147,  170,  213,  189,  138,   54,  216,
      171,  139,  190, 1213,  140,  141,  217,  172,  142,  211,
      212,  143,  148, 1213,  149,  147,  150,  150,  150,  150,
      150,  191,  192,  189,  199,   54,  193,  207,  194,  190,
      214,  203,  218,  219,  220,  215,  208,  200,  209,  221,
      201, 1213, 1213, 1213,  233, 1213,  235,  204,  191,  192,
     1213,  199,  205,  193,  207,  194,  222,  214,  203,  218,
      219,  220,  215,  208,  200,  209,  221,  201,  231,  224,

      227,  233,  223,  235,  204,  241,  228,  229,  232,  205,
      225,  230,  236,  222,  237,  239,  226,  242,  243,  244,
      240,  250, 1213,  245,  251,  231,  224,  227, 1213,  223,
      238,  252,  241,  228,  229,  232,  247,  225,  230,  236,
      246,  237,  239,  226,  242,  243,  244,  240,  250,  248,
      245,  251,  253,  256,  257,  249,  254,  238,  252,  258,
      259,  261,  262,  247,  264,  265,  267,  246,  260,  255,
      263,  268,  269,  266,  270,  271,  248,  272,  273,  253,
      256,  257,  249,  254,  274, 1213,  258,  259,  261,  262,
      282,  264,  265,  267,  275,  260,  255,  263,  268,  269,

      266,  270,  271, 1213,  272,  273,  283, 1213,  276, 1213,
     1213,  274,  145,  145,  145,  145,  145,  282, 1213, 1213,
     1213,  275, 1213,  148,  277,  148, 1213,  278,  278,  278,
      278,  278,  279,  283,  280,  276,  281,  281,  281,  281,
      281,  278,  278,  278,  278,  278,  150,  150,  150,  150,
      150,  277,  150,  150,  150,  150,  150,  284,  285,  286,
      287,  288,  289,  290,  291,  293,  292,  295,  296,  297,
      299,  300,  301,  277,  302,  303,  304,  294,  305,  306,
      307,  308,  298,  309,  284,  285,  286,  287,  288,  289,
      290,  291,  293,  292,  295,  296,  297,  299,  300,  301,

      310,  302,  303,  304,  294,  305,  306,  307,  308,  298,
      309,  311,  312,  313,  314,  315,  316,  317,  318,  319,
      320,  321,  322,  323,  324, 1213,  327,  310,  328,  329,
      330,  331,  332,  333,  334,  335,  336, 1213,  311,  312,
      313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
      323,  324,  325,  327,  339,  328,  329,  330,  331,  332,
      333,  334,  335,  336,  337,  326,  340,  341,  342,  344,
      345,  346,  338,  347,  348, 1213,  352,  353,  343,  325,
      354,  339,  355,  356,  357,  349,  358,  359,  360,  361,
      350,  337,  326,  340,  341,  342,  344,  345,  346,  338,

      347,  348,  351,  352,  353,  343,  362,  354,  364,  355,
      356,  357,  349,  358,  359,  360,  361,  350,  365,  366,
      367,  363,  368,  369,  370,  371,  372,  373,  374,  351,
      375,  376,  377,  362,  378,  364,  379,  380,  381,  382,
      383,  384,  385,  386,  387,  365,  366,  367,  363,  368,
      369,  370,  371,  372,  373,  374,  388,  375,  376,  377,
      389,  378,  390,  379,  380,  381,  382,  383,  384,  385,
      386,  387,  391,  392,  395,  401,  397,  393,  396,  398,
      394,  403,  399,  388,  404,  400,  402,  389,  405,  390,
      406,  408,  407,  410,  411,  412,  413,  409,  414,  391,

      392,  395,  401,  397,  393,  396,  398,  394,  403,  399,
      415,  404,  400,  402,  416,  405,  417,  406,  408,  407,
      410,  411,  412,  413,  409,  414,  279, 1213,  279, 1213,
      418,  418,  418,  418,  418, 1213, 1213,  415,  419,  420,
      421,  416,  422,  417,  278,  278,  278,  278,  278,  418,
      418,  418,  418,  418,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  423,  419,  420,  421,  424,  422,
      425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
     1213,  423,  447,  453,  454,  424,  455,  425,  426,  427,

      428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
      438,  439,  440,  441,  442,  443,  444,  445,  448,  447,
      453,  454,  456,  455,  457,  458,  459,  460,  461,  462,
      463,  464,  446,  449,  450,  451,  465,  452,  466,  467,
      468,  469,  470,  471,  445,  448,  472,  473,  474,  456,
      475,  457,  458,  459,  460,  461,  462,  463,  464,  446,
      449,  450,  451,  465,  452,  466,  467,  468,  469,  470,
      471,  476,  477,  472,  473,  474,  478,  475,  479,  480,
      481,  482,  483,  484,  485,  486,  487,  488,  489,  490,
      491,  492,  493,  494,  497,  498,  495,  499,  476,  477,

      496,  500,  501,  478,  502,  479,  480,  481,  482,  483,
      484,  485,  486,  487,  488,  489,  490,  491,  492,  493,
      494,  497,  498,  495,  499,  503,  504,  496,  500,  501,
      505,  502,  506,  511,  512,  513,  514,  515,  516,  517,
      518,  519,  521,  522,  523,  520,  524,  507,  508,  509,
      525,  510,  503,  504,  526,  527,  528,  505,  529,  506,
      511,  512,  513,  514,  515,  516,  517,  518,  519,  521,
      522,  523,  520,  524,  507,  508,  509,  525,  510,  530,
      531,  526,  527,  528,  532,  529,  533,  534,  535,  536,
      537,  538,  539,  540,  541,  542,  543,  544,  545,  546,

     1213,  549,  550,  552,  551,  553,  530,  531,  554,  547,
     1213,  532, 1213,  533,  534,  535,  536,  537,  538,  539,
      540,  541,  542,  543,  544,  545,  546,  548,  549,  550,
      552,  551,  553,  555,  556,  554,  547,  418,  418,  418,
      418,  418,  557,  558,  559,  560,  561,  562,  563,  564,
      565,  566,  567,  568,  548,  569,  570,  571,  572,  573,
      555,  556,  574,  575,  576, 1213,  581,  582,  583,  557,
      558,  559,  560,  561,  562,  563,  564,  565,  566,  567,
      568,  577,  569,  570,  571,  572,  573,  579,  584,  574,
      575,  576,  578,  581,  582,  583,  585,  586,  587,  588,

      589,  590,  580,  591,  592,  593,  595,  594,  577,  596,
      597,  598,  599,  600,  601,  584,  602,  603,  604,  578,
      605,  606,  607,  585,  586,  587,  588,  589,  590,  580,
      591,  592,  593,  595,  594,  608,  596,  597,  598,  599,
      600,  601,  609,  602,  603,  604,  611,  605,  606,  607,
      612,  613,  614,  615,  616,  617,  618,  619,  620,  621,
      622,  623,  608,  624,  610,  625,  626,  627,  628,  609,
      629,  630,  631,  611,  632,  633,  638,  612,  613,  614,
      615,  616,  617,  618,  619,  620,  621,  622,  623,  634,
      624,  610,  625,  626,  627,  628,  636,  629,  630,  631,

      635,  632,  633,  638,  639,  640,  641,  642,  643,  644,
      645,  637,  646,  647,  648,  649,  634,  650,  651,  654,
      655,  652,  653,  656,  657,  658,  659,  635,  660,  661,
      662,  639,  640,  641,  642,  643,  644,  645,  637,  646,
      647,  648,  649,  663,  650,  651,  654,  655,  652,  653,
      656,  657,  658,  659,  664,  660,  661,  662,  665,  666,
      667,  668,  669,  670,  671,  672,  673,  674,  675,  676,
      663,  677,  678,  679,  681,  682,  683,  684,  685,  680,
      686,  664,  687,  688,  689,  665,  666,  667,  668,  669,
      670,  671,  672,  673,  674,  675,  676,  690,  677,  678,

      679,  681,  682,  683,  684,  685,  680,  686,  691,  687,
      688,  689,  692,  693,  694,  695,  696,  697,  698,  699,
      700,  701,  702,  703,  690,  704,  705,  706,  707,  708,
      709,  710,  711,  712,  713,  691,  714,  715,  716,  692,
      693,  694,  695,  696,  697,  698,  699,  700,  701,  702,
      703,  717,  704,  705,  706,  707,  708,  709,  710,  711,
      712,  713,  718,  714,  715,  716,  719,  720,  721,  722,
      723,  724,  725,  726,  727,  728,  729,  730,  717,  731,
      732,  733,  734,  735,  738,  736,  739,  737,  740,  718,
      741,  742,  743,  719,  720,  721,  722,  723,  724,  725,

      726,  727,  728,  729,  730,  744,  731,  732,  733,  734,
      735,  738,  736,  739,  737,  740,  745,  741,  742,  743,
      747,  748,  749,  750,  746,  751,  752,  753,  754,  755,
      756,  757,  744,  758,  759,  760,  761,  762,  763,  764,
      765,  766,  767,  745,  768,  769,  770,  747,  748,  749,
      750,  746,  751,  752,  753,  754,  755,  756,  757,  771,
      758,  759,  760,  761,  762,  763,  764,  765,  766,  767,
      772,  768,  769,  770,  773,  774,  775,  776,  778,  777,
      779,  780,  781, 1213, 1213,  786,  771,  787,  788,  789,
     1213,  790,  791,  792,  793,  794,  795,  772,  796,  782,

      797,  773,  774,  775,  776,  778,  777,  779,  780,  781,
      783,  784,  786,  798,  787,  788,  789,  785,  790,  791,
      792,  793,  794,  795,  799,  796,  782,  797,  800,  801,
      802,  803,  805,  806,  807,  808,  809,  783,  784,  810,
      798,  811,  812,  813,  785,  814,  815,  816,  804,  817,
      818,  799,  819,  820,  821,  800,  801,  802,  803,  805,
      806,  807,  808,  809,  822,  823,  810,  824,  811,  812,
      813,  825,  814,  815,  816,  804,  817,  818,  826,  819,
      820,  821,  827,  828,  829,  830,  831,  832,  833,  834,
      835,  822,  823,  836,  824,  837,  838,  839,  825,  840,

      841,  842,  844,  845,  846,  826,  847,  848,  849,  827,
      828,  829,  830,  831,  832,  833,  834,  835,  843,  850,
      836,  851,  837,  838,  839,  852,  840,  841,  842,  844,
      845,  846,  853,  847,  848,  849,  854,  855,  856,  857,
      858,  859,  860,  861,  862,  843,  850,  863,  851,  864,
      865,  866,  852,  867,  868,  869,  870,  871,  872,  853,
      873,  874,  875,  854,  855,  856,  857,  858,  859,  860,
      861,  862,  876,  877,  863,  878,  864,  865,  866,  879,
      867,  868,  869,  870,  871,  872,  880,  873,  874,  875,
      881,  882,  883,  884,  885,  886,  887,  889,  890,  876,

      877,  891,  878,  892,  893,  894,  879,  895,  896,  897,
      898,  899,  900,  880,  901,  902,  903,  881,  882,  883,
      884,  885,  886,  887,  889,  890,  904,  905,  891,  906,
      892,  893,  894,  907,  895,  896,  897,  898,  899,  900,
      908,  901,  902,  903,  909,  910,  911,  912,  913,  914,
      915,  916,  917,  904,  905,  918,  906,  919,  921,  922,
      907,  923,  924,  925,  926,  927,  928,  908,  929,  930,
      931,  909,  910,  911,  912,  913,  914,  915,  916,  917,
      932,  933,  918,  934,  919,  921,  922,  935,  923,  924,
      925,  926,  927,  928,  936,  929,  930,  931,  937,  938,

      939,  940,  941,  942,  943,  944,  945,  932,  933,  946,
      934,  947,  948,  949,  935,  950,  951,  952,  953,  954,
      955,  936,  956,  957,  958,  937,  938,  939,  940,  941,
      942,  943,  944,  945,  959,  960,  946,  961,  947,  948,
      949,  962,  950,  951,  952,  953,  954,  955,  963,  956,
      957,  958,  964,  965,  966,  967,  968,  969,  970,  971,
      972,  959,  960,  973,  961,  974,  975,  976,  962,  977,
      978,  979,  980,  981,  982,  963,  983,  984,  985,  964,
      965,  966,  967,  968,  969,  970,  971,  972,  986,  987,
      973,  988,  974,  975,  976,  989,  977,  978,  979,  980,

      981,  982,  990,  983,  984,  985,  991,  992,  993,  994,
      995,  996,  997,  998,  999,  986,  987, 1000,  988, 1001,
     1002, 1003,  989, 1006, 1007, 1008, 1009, 1010, 1004,  990,
     1011, 1012, 1013,  991,  992,  993,  994,  995,  996,  997,
      998,  999, 1005, 1014, 1000, 1015, 1001, 1002, 1003, 1016,
     1006, 1007, 1008, 1009, 1010, 1004, 1017, 1011, 1012, 1013,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1005,
     1014, 1027, 1015, 1028, 1029, 1030, 1016, 1031, 1032, 1033,
     1034, 1035, 1036, 1017, 1037, 1038, 1039, 1018, 1019, 1020,
     1021, 1022, 1023, 1024, 1025, 1026, 1040, 1041, 1027, 1042,

     1028, 1029, 1030, 1043, 1031, 1032, 1033, 1034, 1035, 1036,
     1044, 1037, 1038, 1039, 1045, 1046, 1047, 1048, 1049, 1050,
     1051, 1052, 1053, 1040, 1041, 1054, 1042, 1055, 1056, 1057,
     1043, 1058, 1059, 1060, 1061, 1062, 1063, 1044, 1064, 1065,
     1066, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
     1067, 1068, 1054, 1069, 1055, 1056, 1057, 1070, 1058, 1059,
     1060, 1061, 1062, 1063, 1071, 1064, 1065, 1066, 1072, 1073,
     1074, 1076, 1077, 1078, 1079, 1080, 1081, 1067, 1068, 1082,
     1069, 1075, 1083, 1084, 1070, 1085, 1086, 1087, 1088, 1089,
     1090, 1071, 1091, 1092, 1093, 1072, 1073, 1074, 1076, 1077,

     1078, 1079, 1080, 1081, 1094, 1095, 1082, 1096, 1075, 1083,
     1084, 1097, 1085, 1086, 1087, 1088, 1089, 1090, 1098, 1091,
     1092, 1093, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
     1107, 1094, 1095, 1108, 1096, 1109, 1110, 1111, 1097, 1112,
     1113, 1114, 1115, 1116, 1117, 1098, 1118, 1119, 1120, 1099,
     1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1121, 1122,
     1108, 1123, 1109, 1110, 1111, 1124, 1112, 1113, 1114, 1115,
     1116, 1117, 1125, 1118, 1119, 1120, 1126, 1127, 1128, 1129,
     1130, 1131, 1132, 1133, 1134, 1121, 1122, 1135, 1123, 1136,
     1137, 1138, 1124, 1139, 1140, 1141, 1142, 1143, 1144, 1125,

     1145, 1146, 1147, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
     1133, 1134, 1148, 1149, 1135, 1150, 1136, 1137, 1138, 1151,
     1139, 1140, 1141, 1142, 1143, 1144, 1152, 1145, 1146, 1147,
     1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1148,
     1149, 1162, 1150, 1163, 1164, 1165, 1151, 1166, 1167, 1168,
     1169, 1170, 1171, 1152, 1172, 1173, 1174, 1153, 1154, 1155,
     1156, 1157, 1158, 1159, 1160, 1161, 1175, 1176, 1162, 1177,
     1163, 1164, 1165, 1178, 1166, 1167, 1168, 1169, 1170, 1171,
     1179, 1172, 1173, 1174, 1180, 1181, 1182, 1183, 1184, 1185,
     1186, 1187, 1188, 1175, 1176, 1191, 1177, 1192, 1193, 1194,

     1178, 1195, 1196, 1197, 1198, 1199, 1200, 1179, 1201, 1202,
     1203, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
     1204, 1205, 1191, 1206, 1192, 1193, 1194, 1207, 1195, 1196,
     1197, 1198, 1199, 1200, 1208, 1201, 1202, 1203, 1209, 1210,
     1211, 1212, 1213, 1213, 1213, 1213, 1213, 1204, 1205, 1213,
     1206, 1213, 1213, 1213, 1207, 1213, 1213, 1213, 1213, 1213,
     1213, 1208, 1213, 1213, 1213, 1209, 1210, 1211, 1212,   45,
       45,   45,   47, 1213,   47,    3, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,

     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213
    } ;

static yyconst flex_int16_t yy_chk[2652] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   13,   13,   13,   13,   13,
       13,   15,   15,   15,   15,   15,   15,   16,   16,   16,
       16,   16,   16,   17,   17,   17,   17,   17,   17,   21,

       21,   22,   23,   40,   22,   27,   17,   27,   25,   25,
       22,   21,   55,   23,   22,   21,   23,   23,   25, 1214,
       27,  843,   23, 1175, 1175,   56,   21,   21,   22,   23,
       40,   22,   27,   17,   27,   25,   25,   22,   21,   55,
       23,   22,   21,   23,   23,   25,   24,   27,   28,   23,
       24,   29,   56,  804,   24,   29,   58,   29,   28,   29,
       24,  115,   30,   92,   59,   45,   30,   43,   60,    8,
       30,   61,    5,   24,    3,   28,   32,   24,   29,    0,
       32,   24,   29,   58,   29,   28,   29,   24,   26,   30,
       32,   59,   26,   30,   57,   60,   31,   30,   61,   26,

       31,   26,   26,   32,   31,   26,   26,   32,   26,   38,
       26,    0,   66,   57,   38,   26,   31,   32,   57,   26,
       65,   57,    0,   31,   65,    0,   26,   31,   26,   26,
        0,   31,   26,   26,    0,   26,   38,   26,   34,   66,
       57,   38,   68,   31,   33,   57,   34,   65,   33,   35,
       33,   65,   34,   35,   72,   34,   33,   35,   34,   73,
       33,   35,   74,   33,   33,   34,   75,   35,   35,   68,
       63,   33,   63,   34,    0,   33,    0,   33,   64,   34,
       35,   72,   34,   33,   35,   34,   73,   33,   35,   74,
       33,   33,   64,   75,   35,   35,   36,   63,   76,   63,

       36,   70,   77,   36,   36,   64,   36,   67,   79,   67,
       36,   36,   80,   82,   70,   36,   84,   85,   70,   64,
       36,    0,    0,   36,    0,   76,    0,   36,   70,   77,
       36,   36,    0,   36,   67,   79,   67,   36,   36,   80,
       82,   70,   36,   84,   85,   70,   86,   36,   37,   48,
       48,   48,   48,   48,   87,   37,   37,   50,   50,   50,
       50,   50,   37,   90,   91,   37,   49,   49,   49,   49,
       49,   49,   37,   86,   93,   37,    0,    0,   95,   49,
        0,   87,   37,   37,   53,   53,   53,   53,   53,   37,
       90,   91,   37,    0,   97,   99,   53,   69,  101,   37,

       39,   93,  103,   69,   39,   95,   49,   39,   39,  104,
       69,   39,  100,  100,   39,   51,   51,   51,   51,   51,
       51,   97,   99,   53,   69,  101,   88,   39,   51,  103,
       69,   39,   88,    0,   39,   39,  104,   69,   39,  100,
      100,   39,   54,    0,   54,   53,   54,   54,   54,   54,
       54,   89,   89,   88,   94,   51,   89,   98,   89,   88,
      102,   96,  105,  107,  108,  102,   98,   94,   98,  109,
       94,    0,    0,    0,  114,    0,  116,   96,   89,   89,
        0,   94,   96,   89,   98,   89,  110,  102,   96,  105,
      107,  108,  102,   98,   94,   98,  109,   94,  113,  111,

      112,  114,  110,  116,   96,  119,  112,  112,  113,   96,
      111,  112,  117,  110,  117,  118,  111,  120,  121,  122,
      118,  125,    0,  123,  126,  113,  111,  112,    0,  110,
      117,  127,  119,  112,  112,  113,  124,  111,  112,  117,
      123,  117,  118,  111,  120,  121,  122,  118,  125,  124,
      123,  126,  128,  129,  130,  124,  128,  117,  127,  131,
      132,  133,  134,  124,  135,  136,  137,  123,  132,  128,
      134,  138,  139,  136,  140,  141,  124,  141,  142,  128,
      129,  130,  124,  128,  143,    0,  131,  132,  133,  134,
      151,  135,  136,  137,  144,  132,  128,  134,  138,  139,

      136,  140,  141,    0,  141,  142,  152,    0,  144,    0,
        0,  143,  145,  145,  145,  145,  145,  151,    0,    0,
        0,  144,    0,  146,  145,  146,    0,  146,  146,  146,
      146,  146,  147,  152,  147,  144,  147,  147,  147,  147,
      147,  148,  148,  148,  148,  148,  149,  149,  149,  149,
      149,  145,  150,  150,  150,  150,  150,  153,  154,  155,
      156,  157,  158,  159,  160,  161,  160,  162,  163,  164,
      165,  166,  167,  145,  169,  170,  171,  161,  172,  173,
      174,  175,  164,  176,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  160,  162,  163,  164,  165,  166,  167,

      178,  169,  170,  171,  161,  172,  173,  174,  175,  164,
      176,  179,  180,  181,  182,  183,  184,  185,  186,  187,
      188,  189,  190,  191,  192,    0,  194,  178,  195,  196,
      197,  198,  199,  200,  202,  203,  204,    0,  179,  180,
      181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
      191,  192,  193,  194,  206,  195,  196,  197,  198,  199,
      200,  202,  203,  204,  205,  193,  207,  208,  209,  210,
      211,  212,  205,  213,  214,    0,  217,  218,  209,  193,
      219,  206,  220,  221,  223,  215,  224,  226,  227,  228,
      215,  205,  193,  207,  208,  209,  210,  211,  212,  205,

      213,  214,  215,  217,  218,  209,  229,  219,  230,  220,
      221,  223,  215,  224,  226,  227,  228,  215,  232,  233,
      235,  229,  236,  237,  238,  239,  240,  241,  242,  215,
      243,  244,  245,  229,  246,  230,  247,  248,  249,  250,
      251,  252,  253,  254,  255,  232,  233,  235,  229,  236,
      237,  238,  239,  240,  241,  242,  255,  243,  244,  245,
      256,  246,  257,  247,  248,  249,  250,  251,  252,  253,
      254,  255,  258,  259,  260,  262,  261,  259,  260,  261,
      259,  263,  261,  255,  264,  261,  262,  256,  265,  257,
      266,  267,  266,  268,  269,  269,  271,  267,  272,  258,

      259,  260,  262,  261,  259,  260,  261,  259,  263,  261,
      274,  264,  261,  262,  275,  265,  276,  266,  267,  266,
      268,  269,  269,  271,  267,  272,  277,    0,  277,    0,
      277,  277,  277,  277,  277,    0,    0,  274,  282,  283,
      284,  275,  285,  276,  278,  278,  278,  278,  278,  279,
      279,  279,  279,  279,  280,  280,  280,  280,  280,  281,
      281,  281,  281,  281,  286,  282,  283,  284,  287,  285,
      288,  289,  290,  291,  292,  293,  294,  295,  296,  298,
      299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
        0,  286,  310,  312,  313,  287,  314,  288,  289,  290,

      291,  292,  293,  294,  295,  296,  298,  299,  300,  301,
      302,  303,  304,  305,  306,  307,  308,  309,  311,  310,
      312,  313,  315,  314,  316,  317,  318,  319,  320,  322,
      323,  324,  309,  311,  311,  311,  325,  311,  326,  327,
      328,  329,  330,  331,  309,  311,  332,  333,  334,  315,
      335,  316,  317,  318,  319,  320,  322,  323,  324,  309,
      311,  311,  311,  325,  311,  326,  327,  328,  329,  330,
      331,  336,  337,  332,  333,  334,  338,  335,  339,  340,
      341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
      351,  352,  354,  355,  358,  359,  356,  360,  336,  337,

      356,  362,  364,  338,  365,  339,  340,  341,  342,  343,
      344,  345,  346,  347,  348,  349,  350,  351,  352,  354,
      355,  358,  359,  356,  360,  366,  367,  356,  362,  364,
      370,  365,  372,  373,  374,  375,  376,  377,  378,  379,
      383,  384,  385,  387,  388,  384,  389,  372,  372,  372,
      390,  372,  366,  367,  391,  392,  393,  370,  394,  372,
      373,  374,  375,  376,  377,  378,  379,  383,  384,  385,
      387,  388,  384,  389,  372,  372,  372,  390,  372,  396,
      397,  391,  392,  393,  398,  394,  399,  400,  401,  402,
      403,  405,  406,  407,  408,  410,  411,  412,  413,  414,

        0,  416,  417,  419,  417,  420,  396,  397,  421,  415,
        0,  398,    0,  399,  400,  401,  402,  403,  405,  406,
      407,  408,  410,  411,  412,  413,  414,  415,  416,  417,
      419,  417,  420,  422,  423,  421,  415,  418,  418,  418,
      418,  418,  426,  427,  428,  429,  430,  431,  434,  436,
      437,  438,  439,  441,  415,  442,  443,  444,  445,  446,
      422,  423,  447,  448,  449,    0,  452,  453,  454,  426,
      427,  428,  429,  430,  431,  434,  436,  437,  438,  439,
      441,  450,  442,  443,  444,  445,  446,  451,  455,  447,
      448,  449,  450,  452,  453,  454,  456,  457,  458,  459,

      460,  461,  451,  462,  463,  464,  465,  464,  450,  466,
      467,  468,  469,  470,  472,  455,  473,  474,  476,  450,
      477,  478,  479,  456,  457,  458,  459,  460,  461,  451,
      462,  463,  464,  465,  464,  480,  466,  467,  468,  469,
      470,  472,  481,  473,  474,  476,  482,  477,  478,  479,
      483,  484,  485,  486,  487,  488,  489,  490,  491,  492,
      493,  494,  480,  495,  481,  496,  497,  499,  500,  481,
      502,  503,  505,  482,  506,  507,  510,  483,  484,  485,
      486,  487,  488,  489,  490,  491,  492,  493,  494,  508,
      495,  481,  496,  497,  499,  500,  509,  502,  503,  505,

      508,  506,  507,  510,  511,  512,  513,  514,  516,  517,
      518,  509,  519,  520,  522,  523,  508,  524,  525,  526,
      527,  525,  525,  528,  529,  530,  532,  508,  533,  534,
      535,  511,  512,  513,  514,  516,  517,  518,  509,  519,
      520,  522,  523,  536,  524,  525,  526,  527,  525,  525,
      528,  529,  530,  532,  537,  533,  534,  535,  538,  540,
      541,  542,  543,  544,  545,  546,  547,  550,  551,  552,
      536,  555,  556,  557,  558,  559,  560,  561,  562,  557,
      563,  537,  564,  565,  566,  538,  540,  541,  542,  543,
      544,  545,  546,  547,  550,  551,  552,  567,  555,  556,

      557,  558,  559,  560,  561,  562,  557,  563,  569,  564,
      565,  566,  570,  571,  572,  573,  577,  578,  580,  581,
      582,  583,  584,  585,  567,  586,  587,  588,  591,  592,
      593,  594,  595,  596,  599,  569,  600,  601,  602,  570,
      571,  572,  573,  577,  578,  580,  581,  582,  583,  584,
      585,  603,  586,  587,  588,  591,  592,  593,  594,  595,
      596,  599,  604,  600,  601,  602,  605,  606,  607,  608,
      609,  610,  611,  612,  613,  614,  615,  616,  603,  617,
      618,  619,  620,  623,  624,  623,  625,  623,  626,  604,
      627,  628,  629,  605,  606,  607,  608,  609,  610,  611,

      612,  613,  614,  615,  616,  630,  617,  618,  619,  620,
      623,  624,  623,  625,  623,  626,  631,  627,  628,  629,
      634,  635,  637,  638,  631,  639,  641,  642,  643,  647,
      649,  650,  630,  651,  652,  653,  654,  655,  657,  659,
      660,  661,  663,  631,  664,  665,  666,  634,  635,  637,
      638,  631,  639,  641,  642,  643,  647,  649,  650,  667,
      651,  652,  653,  654,  655,  657,  659,  660,  661,  663,
      668,  664,  665,  666,  669,  670,  671,  672,  673,  672,
      674,  675,  676,    0,    0,  679,  667,  680,  681,  682,
        0,  683,  684,  685,  686,  687,  688,  668,  689,  677,

      690,  669,  670,  671,  672,  673,  672,  674,  675,  676,
      677,  677,  679,  691,  680,  681,  682,  677,  683,  684,
      685,  686,  687,  688,  692,  689,  677,  690,  693,  694,
      695,  696,  697,  698,  699,  700,  701,  677,  677,  704,
      691,  705,  706,  707,  677,  708,  709,  710,  696,  712,
      714,  692,  716,  718,  719,  693,  694,  695,  696,  697,
      698,  699,  700,  701,  721,  723,  704,  724,  705,  706,
      707,  725,  708,  709,  710,  696,  712,  714,  727,  716,
      718,  719,  728,  729,  731,  732,  733,  734,  735,  736,
      737,  721,  723,  738,  724,  740,  743,  744,  725,  745,

      746,  747,  748,  749,  750,  727,  753,  754,  756,  728,
      729,  731,  732,  733,  734,  735,  736,  737,  747,  757,
      738,  758,  740,  743,  744,  759,  745,  746,  747,  748,
      749,  750,  760,  753,  754,  756,  761,  765,  766,  767,
      768,  769,  770,  771,  772,  747,  757,  774,  758,  776,
      777,  780,  759,  782,  783,  784,  785,  786,  787,  760,
      788,  789,  791,  761,  765,  766,  767,  768,  769,  770,
      771,  772,  792,  793,  774,  794,  776,  777,  780,  795,
      782,  783,  784,  785,  786,  787,  797,  788,  789,  791,
      798,  799,  800,  801,  802,  802,  803,  805,  806,  792,

      793,  807,  794,  809,  811,  813,  795,  814,  815,  816,
      817,  818,  819,  797,  820,  822,  823,  798,  799,  800,
      801,  802,  802,  803,  805,  806,  824,  825,  807,  827,
      809,  811,  813,  828,  814,  815,  816,  817,  818,  819,
      829,  820,  822,  823,  830,  831,  833,  834,  835,  837,
      838,  839,  840,  824,  825,  841,  827,  842,  844,  845,
      828,  846,  847,  848,  849,  851,  852,  829,  853,  854,
      855,  830,  831,  833,  834,  835,  837,  838,  839,  840,
      857,  859,  841,  860,  842,  844,  845,  861,  846,  847,
      848,  849,  851,  852,  864,  853,  854,  855,  865,  866,

      867,  868,  869,  870,  871,  872,  873,  857,  859,  874,
      860,  875,  876,  877,  861,  878,  879,  880,  881,  883,
      884,  864,  885,  886,  887,  865,  866,  867,  868,  869,
      870,  871,  872,  873,  889,  890,  874,  891,  875,  876,
      877,  894,  878,  879,  880,  881,  883,  884,  895,  885,
      886,  887,  896,  897,  900,  901,  902,  904,  905,  906,
      907,  889,  890,  908,  891,  909,  911,  912,  894,  913,
      914,  915,  916,  917,  919,  895,  921,  922,  923,  896,
      897,  900,  901,  902,  904,  905,  906,  907,  928,  929,
      908,  931,  909,  911,  912,  932,  913,  914,  915,  916,

      917,  919,  934,  921,  922,  923,  935,  936,  937,  938,
      939,  940,  941,  942,  944,  928,  929,  945,  931,  946,
      947,  948,  932,  951,  954,  955,  956,  957,  949,  934,
      959,  961,  963,  935,  936,  937,  938,  939,  940,  941,
      942,  944,  949,  964,  945,  965,  946,  947,  948,  966,
      951,  954,  955,  956,  957,  949,  967,  959,  961,  963,
      968,  971,  972,  974,  975,  976,  977,  979,  980,  949,
      964,  983,  965,  985,  986,  987,  966,  988,  989,  990,
      991,  992,  993,  967,  994,  995,  996,  968,  971,  972,
      974,  975,  976,  977,  979,  980,  997, 1001,  983, 1003,

      985,  986,  987, 1004,  988,  989,  990,  991,  992,  993,
     1005,  994,  995,  996, 1006, 1008, 1009, 1010, 1011, 1012,
     1013, 1014, 1015,  997, 1001, 1016, 1003, 1018, 1019, 1021,
     1004, 1022, 1023, 1024, 1025, 1027, 1028, 1005, 1029, 1030,
     1031, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
     1032, 1033, 1016, 1034, 1018, 1019, 1021, 1035, 1022, 1023,
     1024, 1025, 1027, 1028, 1037, 1029, 1030, 1031, 1038, 1039,
     1040, 1042, 1043, 1044, 1045, 1046, 1047, 1032, 1033, 1048,
     1034, 1040, 1049, 1050, 1035, 1051, 1052, 1053, 1054, 1055,
     1056, 1037, 1057, 1058, 1059, 1038, 1039, 1040, 1042, 1043,

     1044, 1045, 1046, 1047, 1060, 1061, 1048, 1062, 1040, 1049,
     1050, 1063, 1051, 1052, 1053, 1054, 1055, 1056, 1064, 1057,
     1058, 1059, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074,
     1075, 1060, 1061, 1077, 1062, 1078, 1080, 1081, 1063, 1082,
     1084, 1085, 1086, 1087, 1088, 1064, 1090, 1091, 1092, 1066,
     1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1093, 1094,
     1077, 1095, 1078, 1080, 1081, 1097, 1082, 1084, 1085, 1086,
     1087, 1088, 1098, 1090, 1091, 1092, 1099, 1100, 1101, 1102,
     1104, 1105, 1106, 1107, 1108, 1093, 1094, 1109, 1095, 1110,
     1111, 1112, 1097, 1113, 1114, 1115, 1116, 1117, 1118, 1098,

     1120, 1121, 1122, 1099, 1100, 1101, 1102, 1104, 1105, 1106,
     1107, 1108, 1123, 1124, 1109, 1128, 1110, 1111, 1112, 1129,
     1113, 1114, 1115, 1116, 1117, 1118, 1130, 1120, 1121, 1122,
     1131, 1132, 1133, 1134, 1137, 1138, 1139, 1140, 1141, 1123,
     1124, 1142, 1128, 1144, 1145, 1146, 1129, 1147, 1148, 1149,
     1150, 1151, 1152, 1130, 1153, 1155, 1157, 1131, 1132, 1133,
     1134, 1137, 1138, 1139, 1140, 1141, 1158, 1159, 1142, 1160,
     1144, 1145, 1146, 1162, 1147, 1148, 1149, 1150, 1151, 1152,
     1163, 1153, 1155, 1157, 1164, 1165, 1167, 1168, 1169, 1170,
     1172, 1173, 1174, 1158, 1159, 1176, 1160, 1177, 1178, 1179,

     1162, 1181, 1182, 1183, 1184, 1185, 1186, 1163, 1188, 1191,
     1192, 1164, 1165, 1167, 1168, 1169, 1170, 1172, 1173, 1174,
     1193, 1195, 1176, 1196, 1177, 1178, 1179, 1197, 1181, 1182,
     1183, 1184, 1185, 1186, 1198, 1188, 1191, 1192, 1202, 1205,
     1207, 1208,    0,    0,    0,    0,    0, 1193, 1195,    0,
     1196,    0,    0,    0, 1197,    0,    0,    0,    0,    0,
        0, 1198,    0,    0,    0, 1202, 1205, 1207, 1208, 1215,
     1215, 1215, 1216,    0, 1216, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,

     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int lef_flex_debug;
int lef_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *leftext;
#line 1 "lefscan.l"
#line 2 "lefscan.l"
#ifdef _MSC_VER
#pragma warning (disable:4786)
#endif

#ifdef _MSC_VER
#pragma warning (disable:4786)
#endif

#include <string.h>
#include <ctype.h>
//#include <unistd.h>

#ifdef WIN32
#include <io.h>
#endif

#include "plGeom.h"
#include "LEFDEFpoint.h"
typedef struct lexsstr
    {
    const char *str;
    int  DoDelete;
    } lexemeStruct;

extern int bCaseSens;

char *strCdup(char *s);


#include "lefparse.tab.h"

//static int end_of_file = 0;
int lefLinenum = 0;
static int errflag = 0;

/* Definitions */
/* chr_lit      \'(({chr})|({quote}))*\' */
#line 1503 "<stdout>"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int leflex_destroy (void );

int lefget_debug (void );

void lefset_debug (int debug_flag  );

YY_EXTRA_TYPE lefget_extra (void );

void lefset_extra (YY_EXTRA_TYPE user_defined  );

FILE *lefget_in (void );

void lefset_in  (FILE * in_str  );

FILE *lefget_out (void );

void lefset_out  (FILE * out_str  );

int lefget_leng (void );

char *lefget_text (void );

int lefget_lineno (void );

void lefset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

int lefwrap (void ){ return 1;};

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( leftext, lefleng, 1, lefout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( lefin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( lefin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, lefin))==0 && ferror(lefin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(lefin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int leflex (void);

#define YY_DECL int leflex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after leftext and lefleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 73 "lefscan.l"


#line 1693 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! lefin )
			lefin = stdin;

		if ( ! lefout )
			lefout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			lefensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				lef_create_buffer(lefin,YY_BUF_SIZE );
		}

		lef_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of leftext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1214 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1213 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 75 "lefscan.l"
{  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "lefscan.l"
{  }            
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 78 "lefscan.l"
{  lefLinenum++ ;
                       //BEGIN(INITIAL);
                       }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 81 "lefscan.l"
{  //printf("K_PLUS\n");
                     return(K_PLUS);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 83 "lefscan.l"
{  return(K_MINUS);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 84 "lefscan.l"
{  return(K_STAR);} 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 85 "lefscan.l"
{ return(K_ASGN);}  
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 87 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ABUTMENT";return(K_ABUTMENT);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 88 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ACTIVE";return(K_ACTIVE);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 89 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ANALOG";return(K_ANALOG);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 90 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ANTENNAAREAFACTOR";return(K_ANTENNAAREAFACTOR);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 91 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ANTENNALENGTHFACTOR";return(K_ANTENNALENGTHFACTOR);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 92 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ANTENNAMETALAREA";return(K_ANTENNAMETALAREA);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 93 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ANTENNAMETALLENGTH";return(K_ANTENNAMETALLENGTH);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 94 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ANTENNASIZE";return(K_ANTENNASIZE);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 95 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ANYEDGE";return(K_ANYEDGE);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 96 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ARRAY";return(K_ARRAY);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 97 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="BLOCK";return(K_BLOCK);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 98 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="BOTTOMLEFT";return(K_BOTTOMLEFT);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 99 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="BOTTOMRIGHT";return(K_BOTTOMRIGHT);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 100 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="BUSBITCHARS";return(K_BUSBITCHARS);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 101 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="BY";return(K_BY);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 102 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CANNOTOCCUPY";return(K_CANNOTOCCUPY);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 103 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CANPLACE";return(K_CANPLACE);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 104 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CAPACITANCE";return(K_CAP);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 105 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CAPMULTIPLIER";return(K_CAPMULTIPLIER);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 106 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CLASS";return(K_CLASS);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 107 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CLOCK";return(K_CLOCK);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 108 "lefscan.l"
{leflval.lexeme.DoDelete=1;leflval.lexeme.str=strCdup(leftext);return(K_CORE);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 109 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="COVER";return(K_COVER);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 110 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CORRECTIONFACTOR";return(K_CORRECTIONFACTOR);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 111 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CORRECTIONTABLE";return(K_CORRECTIONTABLE);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 112 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CPERSQDIST";return(K_CPERSQ);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 113 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CURRENTSOURCE";return(K_CURRENTSOURCE);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 114 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CURRENT";return(K_CURRENT);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 115 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="CUT";return(K_CUT);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 116 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="DATA";return(K_DATA);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 117 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="DATABASE";return(K_DATABASE);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 118 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="DEFAULT";return(K_DEFAULT);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 119 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="DEFAULTCAP";return(K_DEFAULTCAP);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 120 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="DELAY";return(K_DELAY);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 121 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="DESIGN";return(K_DESIGN);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 122 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="DIELECTRIC";return(K_DIELECTRIC);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 123 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="DIVIDERCHAR";return(K_DIVIDERCHAR);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 124 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="DIRECTION";return(K_DIRECTION);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 125 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="DO";return(K_DO);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 126 "lefscan.l"
{leflval.lexeme.DoDelete=1;leflval.lexeme.str=strCdup(leftext);return(K_E);} //KLUDGE
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 127 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="EDGECAPACITANCE";return(K_EDGECAP);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 128 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="EDGERATE";return(K_EDGERATE);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 129 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="EDGERATETHRESHOLD1";return(K_EDGERATETHRESHOLD1);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 130 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="EDGERATETHRESHOLD2";return(K_EDGERATETHRESHOLD2);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 131 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="EDGERATESCALEFACTOR";return(K_EDGERATESCALEFACTOR);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 132 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="EEQ";return(K_EEQ);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 133 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="END";//BEGIN(LITERAL);
          return(K_END);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 135 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ENDCAP";return(K_ENDCAP);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 136 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FALL";return(K_FALL);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 137 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FALLRS";return(K_FALLRS);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 138 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FALLCS";return(K_FALLCS);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 139 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FALLSATT1";return(K_FALLSATT1);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 140 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FALLSLEWLIMIT";return(K_FALLSLEWLIMIT);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 141 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FALLT0";return(K_FALLT0);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 142 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FALLTHRESH";return(K_FALLTHRESH);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 143 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FALLSATCUR";return(K_FALLSATCUR);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 144 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FALLVOLTAGETHRESHOLD";return(K_FALLVOLTAGETHRESHOLD);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 145 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FE";return(K_FE);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 146 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FEEDTHRU";return(K_FEEDTHRU);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 147 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FLOORPLAN";return(K_FLOORPLAN);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 148 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FN";return(K_FN);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 149 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FOREIGN";return(K_FOREIGN);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 150 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FROMPIN";return(K_FROMPIN);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 151 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FUNCTION";return(K_FUNCTION);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 152 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FS";return(K_FS);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 153 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="FW";return(K_FW);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 154 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="GCELLGRID";return(K_GCELL);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 155 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="GENERATE";return(K_GENERATE);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 156 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="GROUND";return(K_GROUND);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 157 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="HEIGHT";return(K_HEIGHT);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 158 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="HOLD";return(K_HOLD);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 159 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="HORIZONTAL";return(K_HORIZ);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 160 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="INOUT";return(K_INOUT);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 163 "lefscan.l"
{/*this line is a kludge to make one file parse (CSHELL)*/leflval.lexeme.DoDelete=1;leflval.lexeme.str=strCdup(leftext);return(K_INPUT);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 164 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="INOUTPINANTENNASIZE";return(K_INOUTPINANTENNASIZE);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 165 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="INPUTPINANTENNASIZE";return(K_INPUTPINANTENNASIZE);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 166 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="INPUTNOISEMARGIN";return(K_INPUTNOISEMARGIN);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 167 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="INTEGER";return(K_INTEGER);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 168 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="INTRINSIC";return(K_INTRINSIC);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 169 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="INVERT";return(K_INVERT);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 170 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="IRDROP";return(K_IRDROP);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 171 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ITERATE";return(K_ITERATE);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 172 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="IV_TABLES";return(K_IV_TABLES);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 173 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="LAYER";//BEGIN(LITERAL);
              return(K_LAYER);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 175 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="LEAKAGE";return(K_LEAKAGE);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 176 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="LEQ";return(K_LEQ);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 177 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="LIBRARY";return(K_LIBRARY);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 178 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="LENGTHTHRESHOLD";return(K_LENGTHTHRESHOLD);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 179 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="MACRO";return(K_MACRO);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 180 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="MASTERSLICE";return(K_MSLICE);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 181 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="MAXDELAY";return(K_MAXDELAY);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 182 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="MAXLOAD";return(K_MAXLOAD);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 183 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="METALOVERHANG";return(K_METALOVERHANG);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 184 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="MICRONS";return(K_MICRONS);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 185 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="MILLIAMPS";return(K_MILLIAMPS);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 186 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="MILLIWATTS";return(K_MILLIWATTS);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 187 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="MINFEATURE";return(K_MINFEATURE);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 188 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="MINPINS";return(K_MINPINS);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 189 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="MUSTJOIN";return(K_MUSTJOIN);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 190 "lefscan.l"
{leflval.lexeme.DoDelete=1;leflval.lexeme.str=strCdup(leftext);return(K_N);} //KLUDGE
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 191 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="NAMESCASESENSITIVE";return(K_CASE);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 192 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="NANOSECONDS";return(K_NANOSECONDS);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 193 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="NEGEDGE";return(K_NEGEDGE);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 194 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="NOISETABLE";return(K_NOISETABLE);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 195 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="NONDEFAULTRULE";return(K_NONDEFAULTRULE);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 196 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="NONINVERT";return(K_NONINVERT);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 197 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="NONUNATE";return(K_NONUNATE);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 198 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="OBS";return(K_OBS);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 199 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="OHMS";return(K_OHMS);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 200 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="OFF";return(K_OFF);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 201 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="OFFSET";return(K_OFFSET);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 202 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ON";return(K_ON);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 203 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ORIGIN";return(K_ORIGIN);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 205 "lefscan.l"
{/*this line is a kludge to make one file parse (CSHELL)*/leflval.lexeme.DoDelete=1;leflval.lexeme.str=strCdup(leftext);return(K_OUTPUT);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 207 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="OUTPUTRESISTANCE";return(K_OUTPUTRESISTANCE);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 208 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="OUTPUTNOISEMARGIN";return(K_OUTPUTNOISEMARGIN);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 209 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="OUTPUTPINANTENNASIZE";return(K_OUTPUTPINANTENNASIZE);}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 210 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="OVERHANG";return(K_OVERHANG);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 211 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="OVERLAP";return(K_OVERLAP);}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 212 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="PAD";return(K_PAD);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 213 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="PATH";return(K_PATH);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 214 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="PIN";//BEGIN(LITERAL);
          return(K_PIN);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 216 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="PICOFARADS";return(K_PICOFARADS);}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 217 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="PITCH";return(K_PITCH);}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 218 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="POLYGON";return(K_POLYGON);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 219 "lefscan.l"
{/*this line is a kludge to make one file parse (SUN_TIMING)*/leflval.lexeme.DoDelete=1;leflval.lexeme.str=strCdup(leftext);return(K_PORT);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 220 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="POSEDGE";return(K_POSEDGE);}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 221 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="POST";return(K_POST);}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 222 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="POWER";return(K_POWER);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 223 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="PRE";return(K_PRE);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 224 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="PROPERTY";return(K_PROPERTY);}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 225 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="PROPERTYDEFINITIONS";return(K_PROPERTYDEFINITIONS);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 226 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="PULLDOWNRES";return(K_PULLDOWNRES);}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 227 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="R90";return(K_R90);}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 228 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RANGE";return(K_RANGE);}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 229 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="REAL";return(K_REAL);}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 230 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RECT";return(K_RECT);}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 231 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RESISTANCE";return(K_RES);}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 232 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RESISTIVE";return(K_RESISTIVE);}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 233 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RING";return(K_RING);}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 234 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RISE";return(K_RISE);}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 235 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RISERS";return(K_RISERS);}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 236 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RISECS";return(K_RISECS);}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 237 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RISESATT1";return(K_RISESATT1);}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 238 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RISESLEWLIMIT";return(K_RISESLEWLIMIT);}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 239 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RISET0";return(K_RISET0);}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 240 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RISETHRESH";return(K_RISETHRESH);}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 241 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RISESATCUR";return(K_RISESATCUR);}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 242 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RISEVOLTAGETHRESHOLD";return(K_RISEVOLTAGETHRESHOLD);}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 243 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="ROUTING";return(K_ROUTING);}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 244 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="RPERSQ";return(K_RPERSQ);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 245 "lefscan.l"
{leflval.lexeme.DoDelete=1;leflval.lexeme.str=strCdup(leftext);return(K_S);} //KLUDGE
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 246 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SAMENET";//BEGIN(LITERAL);
                  return(K_SAMENET);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 248 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SETUP";return(K_SETUP);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 249 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SETUPTIME";return(K_SETUPTIME);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 250 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SHAPE";return(K_SHAPE);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 251 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SHRINKAGE";return(K_SHRINKAGE);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 252 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SIGNAL";return(K_SIGNAL);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 253 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SITE";return(K_SITE);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 254 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SIZE";return(K_SIZE);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 255 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SKIP";return(K_SKIP);}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 256 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SOURCE";return(K_SOURCE);}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 257 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SPACER";return(K_SPACER);}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 258 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SPACING";return(K_SPACING);}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 259 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="STACK";return(K_STACK);}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 260 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="STEP";return(K_STEP);}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 261 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="STRING";return(K_STRING);}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 262 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="STRUCTURE";return(K_STRUCTURE);}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 263 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="SYMMETRY";return(K_SYMMETRY);}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 264 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TABLE";return(K_TABLE);}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 265 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TABLEAXIS";return(K_TABLEAXIS);}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 266 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TABLEENTRIES";return(K_TABLEENTRIES);}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 267 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TABLEDIMENSION";return(K_TABLEDIMENSION);}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 268 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="THICKNESS";return(K_THICKNESS);}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 269 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TIEHIGH";return(K_TIEHIGH);}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 270 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TIELOW";return(K_TIELOW);}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 271 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TIEOFF";return(K_TIEOFF);}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 272 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TIEOFFR";return(K_TIEOFFR);}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 273 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TIME";return(K_TIME);}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 274 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TIMING";return(K_TIMING);}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 275 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TO";return(K_TO);}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 276 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TOPIN";return(K_TOPIN);}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 277 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TOPLEFT";return(K_TOPLEFT);}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 278 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TOPOFSTACKONLY";return(K_TOPOFSTACKONLY);}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 279 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TOPRIGHT";return(K_TOPRIGHT);}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 280 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TRACKS";return(K_TRACKS);}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 281 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TRANSITION";return(K_TRANSITION);}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 282 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TRANSITIONTIME";return(K_TRANSITIONTIME);}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 283 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TRISTATE";return(K_TRISTATE);}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 284 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="TYPE";return(K_TYPE);}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 285 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="UNATENESS";return(K_UNATE);}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 286 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="UNIVERSALNOISEMARGIN";return(K_UNIVERSALNOISEMARGIN);}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 287 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="UNITS";return(K_UNITS);}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 288 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="USE";return(K_USE);}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 289 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="USELENGTHTHRESHOLD";return(K_USELENGTHTHRESHOLD);}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 290 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="USER";return(K_USER);}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 291 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="VARIABLE";return(K_VARIABLE);}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 292 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="VERSION";return(K_VERSION);}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 293 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="VERTICAL";return(K_VERT);}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 294 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="VHI";return(K_VHI);}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 295 "lefscan.l"
{leflval.lexeme.DoDelete=1;leflval.lexeme.str=strCdup(leftext);//BEGIN(LITERAL);
                    return(K_VIA);}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 297 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="VIARULE";return(K_VIARULE);}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 298 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="VICTIMLENGTH";return(K_VICTIMLENGTH);}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 299 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="VICTIMNOISE";return(K_VICTIMNOISE);}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 300 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="VLO";return(K_VLO);}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 301 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="VOLTAGE";return(K_VOLTAGE);}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 302 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="VOLTS";return(K_VOLTS);}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 303 "lefscan.l"
{leflval.lexeme.DoDelete=1;leflval.lexeme.str=strCdup(leftext);return(K_W);} //KLUDGE
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 304 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="WIDTH";return(K_WIDTH);}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 305 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="WIRECAP";return(K_WIRECAP);}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 306 "lefscan.l"
{leflval.lexeme.DoDelete=0;leflval.lexeme.str="WIREEXTENSION";return(K_WIREEXTENSION);}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 307 "lefscan.l"
{/*this line is a kludge*/leflval.lexeme.DoDelete=1;leflval.lexeme.str=strCdup(leftext);return(K_X);}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 308 "lefscan.l"
{/*this line is a kludge*/leflval.lexeme.DoDelete=1;leflval.lexeme.str=strCdup(leftext);return(K_Y);}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 311 "lefscan.l"
{ return(K_COMMA);}   
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 312 "lefscan.l"
{  //BEGIN(INITIAL);
                   return(K_SEMCOL);}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 314 "lefscan.l"
{  return(K_DOT_DOT);}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 315 "lefscan.l"
{  return(K_DOT);}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 316 "lefscan.l"
{  return(K_COLON);}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 317 "lefscan.l"
{  return(K_ORDBR1);}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 318 "lefscan.l"
{  return(K_ORDBR2);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 319 "lefscan.l"
{  return(QUOTED_STR);}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 322 "lefscan.l"
{  
     leflval.fval = atof(leftext);
     //printf("\n<>NUMBER %s<>, value %g\n", leftext, leflval.fval);
     return(NUMBER);
     } 
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 327 "lefscan.l"
{  
     leflval.fval = atof(leftext); 
     return(NUMBER);
     }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 331 "lefscan.l"
{  
     leflval.fval = atof(leftext); 
     return(NUMBER);
     }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 335 "lefscan.l"
{   leflval.lexeme.DoDelete=1;
                        leflval.lexeme.str = strCdup(leftext) ;
                            // printf("\n<><>K_IDG %s<><>value = %s\n", leftext, leflval.lexeme.DoDelete=0;leflval.lexeme.str);
                            //BEGIN(INITIAL);
                            return(K_ID);}  
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 340 "lefscan.l"
{  
            printf("\nLEF scan error on line number %d\n",lefLinenum);
            fflush(stdout);
            fflush(stderr);
            if (0) yyunput(0,NULL); //kill silly compiler warning
            exit(-1);
            errflag = 2;
            }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 348 "lefscan.l"
ECHO;
	YY_BREAK
#line 2974 "<stdout>"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed lefin at a new source and called
			 * leflex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = lefin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( lefwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * leftext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of leflex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					lefrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			lefrestart(lefin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) lefrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1214 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1214 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1213);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up leftext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					lefrestart(lefin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( lefwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve leftext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void lefrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        lefensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            lef_create_buffer(lefin,YY_BUF_SIZE );
	}

	lef_init_buffer(YY_CURRENT_BUFFER,input_file );
	lef_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void lef_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		lefpop_buffer_state();
	 *		lefpush_buffer_state(new_buffer);
     */
	lefensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	lef_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (lefwrap()) processing, but the only time this flag
	 * is looked at is after lefwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void lef_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	lefin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE lef_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) lefalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in lef_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) lefalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in lef_create_buffer()" );

	b->yy_is_our_buffer = 1;

	lef_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with lef_create_buffer()
 * 
 */
    void lef_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		leffree((void *) b->yy_ch_buf  );

	leffree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a lefrestart() or at EOF.
 */
    static void lef_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	lef_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then lef_init_buffer was _probably_
     * called from lefrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void lef_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		lef_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void lefpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	lefensure_buffer_stack();

	/* This block is copied from lef_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from lef_switch_to_buffer. */
	lef_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void lefpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	lef_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		lef_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void lefensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)lefalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in lefensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)lefrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in lefensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE lef_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) lefalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in lef_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	lef_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to leflex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       lef_scan_bytes() instead.
 */
YY_BUFFER_STATE lef_scan_string (yyconst char * yystr )
{
    
	return lef_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to leflex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE lef_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) lefalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in lef_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = lef_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in lef_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up leftext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		leftext[lefleng] = (yy_hold_char); \
		(yy_c_buf_p) = leftext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		lefleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int lefget_lineno  (void)
{
        
    return leflineno;
}

/** Get the input stream.
 * 
 */
FILE *lefget_in  (void)
{
        return lefin;
}

/** Get the output stream.
 * 
 */
FILE *lefget_out  (void)
{
        return lefout;
}

/** Get the length of the current token.
 * 
 */
int lefget_leng  (void)
{
        return lefleng;
}

/** Get the current token.
 * 
 */

char *lefget_text  (void)
{
        return leftext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void lefset_lineno (int  line_number )
{
    
    leflineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see lef_switch_to_buffer
 */
void lefset_in (FILE *  in_str )
{
        lefin = in_str ;
}

void lefset_out (FILE *  out_str )
{
        lefout = out_str ;
}

int lefget_debug  (void)
{
        return lef_flex_debug;
}

void lefset_debug (int  bdebug )
{
        lef_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from leflex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    lefin = stdin;
    lefout = stdout;
#else
    lefin = (FILE *) 0;
    lefout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * leflex_init()
     */
    return 0;
}

/* leflex_destroy is for both reentrant and non-reentrant scanners. */
int leflex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		lef_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		lefpop_buffer_state();
	}

	/* Destroy the stack itself. */
	leffree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * leflex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *lefalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *lefrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void leffree (void * ptr )
{
	free( (char *) ptr );	/* see lefrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 348 "lefscan.l"


/*
main()
{
 char p[100];
//BEGIN(INITIAL);
while ((*p = leflex()) != EOF){
}
}

*/

//This function forces everything to upper case in a case-insensitive
//LEFDEF.

char *strCdup(char *s)
    {
    char *pc = strdup(s);
    if (!bCaseSens)
        {
#ifdef _MSC_VER
        _strupr(pc);
#else
        char *pcRun = pc;
        while (*pcRun)
            {
            *pcRun = toupper(*pcRun);
            pcRun++;
            }
#endif
        }
    return pc;
    }


